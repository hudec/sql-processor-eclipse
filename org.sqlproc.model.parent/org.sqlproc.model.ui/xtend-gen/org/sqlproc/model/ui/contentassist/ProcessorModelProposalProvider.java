/**
 * generated by Xtext
 */
package org.sqlproc.model.ui.contentassist;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.sqlproc.model.processorModel.AbstractEntity;
import org.sqlproc.model.processorModel.AnnotatedEntity;
import org.sqlproc.model.processorModel.DatabaseProperty;
import org.sqlproc.model.processorModel.DriverMethodOutputAssignement;
import org.sqlproc.model.processorModel.Entity;
import org.sqlproc.model.processorModel.ExportAssignement;
import org.sqlproc.model.processorModel.ImportAssignement;
import org.sqlproc.model.processorModel.InheritanceAssignement;
import org.sqlproc.model.processorModel.ManyToManyAssignement;
import org.sqlproc.model.processorModel.MetagenProperty;
import org.sqlproc.model.processorModel.PojoDefinitionModel;
import org.sqlproc.model.processorModel.PojoEntity;
import org.sqlproc.model.processorModel.PojogenProperty;
import org.sqlproc.model.processorModel.Property;
import org.sqlproc.model.processorModel.ShowColumnTypeAssignement;
import org.sqlproc.model.ui.contentassist.AbstractProcessorModelProposalProvider;
import org.sqlproc.plugin.lib.resolver.DbExport;
import org.sqlproc.plugin.lib.resolver.DbImport;
import org.sqlproc.plugin.lib.resolver.DbResolver;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class ProcessorModelProposalProvider extends AbstractProcessorModelProposalProvider {
  @Inject
  private DbResolver dbResolver;
  
  private final ArrayList<String> DEBUG_LEVELS = CollectionLiterals.<String>newArrayList("DEBUG", "INFO", "FATAL", "ERROR", "WARN", "TRACE");
  
  public void addProposalList(final List<String> values, final String lexerRule, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String prefix) {
    if (values!=null) {
      final Consumer<String> _function = (String value) -> {
        IValueConverterService _valueConverter = this.getValueConverter();
        String _elvis = null;
        if (prefix != null) {
          _elvis = prefix;
        } else {
          _elvis = "";
        }
        String _plus = (_elvis + value);
        final String proposal = _valueConverter.toString(_plus, lexerRule);
        ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      };
      values.forEach(_function);
    }
  }
  
  public StringBuilder append(final StringBuilder sb, final String s) {
    StringBuilder _xblockexpression = null;
    {
      int _length = sb.length();
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        sb.append(".");
      }
      _xblockexpression = sb.append(s);
    }
    return _xblockexpression;
  }
  
  public boolean isResolveDb(final EObject model) {
    return this.dbResolver.isResolveDb(model);
  }
  
  public String getClass(final PojoDefinitionModel pojo) {
    String _xifexpression = null;
    String _classx = pojo.getClassx();
    boolean _notEquals = (!Objects.equal(_classx, null));
    if (_notEquals) {
      _xifexpression = pojo.getClassx();
    } else {
      _xifexpression = pojo.getClass_();
    }
    return _xifexpression;
  }
  
  public boolean isPrimitive(final Class<?> clazz) {
    boolean _equals = Objects.equal(clazz, null);
    if (_equals) {
      return true;
    }
    boolean _equals_1 = Objects.equal(clazz, String.class);
    if (_equals_1) {
      return true;
    }
    boolean _equals_2 = Objects.equal(clazz, Date.class);
    if (_equals_2) {
      return true;
    }
    boolean _equals_3 = Objects.equal(clazz, java.sql.Date.class);
    if (_equals_3) {
      return true;
    }
    boolean _equals_4 = Objects.equal(clazz, Time.class);
    if (_equals_4) {
      return true;
    }
    boolean _equals_5 = Objects.equal(clazz, Timestamp.class);
    if (_equals_5) {
      return true;
    }
    boolean _equals_6 = Objects.equal(clazz, Blob.class);
    if (_equals_6) {
      return true;
    }
    boolean _equals_7 = Objects.equal(clazz, Clob.class);
    if (_equals_7) {
      return true;
    }
    boolean _equals_8 = Objects.equal(clazz, BigDecimal.class);
    if (_equals_8) {
      return true;
    }
    boolean _equals_9 = Objects.equal(clazz, BigInteger.class);
    if (_equals_9) {
      return true;
    }
    return false;
  }
  
  public void acceptTables(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String suffix) {
    List<String> _tables = this.dbResolver.getTables(model);
    final Function1<String, Boolean> _function = (String it) -> {
      int _indexOf = it.indexOf("$");
      return Boolean.valueOf((_indexOf < 0));
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_tables, _function);
    final Consumer<String> _function_1 = (String table) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(table, "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal((proposal + suffix), context);
      acceptor.accept(_createCompletionProposal);
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptProcedures(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _procedures = this.dbResolver.getProcedures(model);
    final Function1<String, Boolean> _function = (String it) -> {
      int _indexOf = it.indexOf("$");
      return Boolean.valueOf((_indexOf < 0));
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_procedures, _function);
    final Consumer<String> _function_1 = (String table) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(table, "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptFunctions(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _functions = this.dbResolver.getFunctions(model);
    final Function1<String, Boolean> _function = (String it) -> {
      int _indexOf = it.indexOf("$");
      return Boolean.valueOf((_indexOf < 0));
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_functions, _function);
    final Consumer<String> _function_1 = (String table) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(table, "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptCheckConstraints(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _checkConstraints = this.dbResolver.getCheckConstraints(model);
    final Function1<String, Boolean> _function = (String it) -> {
      int _indexOf = it.indexOf("$");
      return Boolean.valueOf((_indexOf < 0));
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_checkConstraints, _function);
    final Consumer<String> _function_1 = (String table) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(table, "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptSequences(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _sequences = this.dbResolver.getSequences(model);
    final Function1<String, Boolean> _function = (String it) -> {
      int _indexOf = it.indexOf("$");
      return Boolean.valueOf((_indexOf < 0));
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_sequences, _function);
    final Consumer<String> _function_1 = (String table) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(table, "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptColumns(final List<String> columns, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String prefix, final String suffix) {
    final Consumer<String> _function = (String column) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(column, "IDENT");
      String _xifexpression = null;
      boolean _notEquals = (!Objects.equal(prefix, null));
      if (_notEquals) {
        _xifexpression = ((prefix + ".") + proposal);
      } else {
        _xifexpression = proposal;
      }
      String completion = _xifexpression;
      String _xifexpression_1 = null;
      boolean _notEquals_1 = (!Objects.equal(suffix, null));
      if (_notEquals_1) {
        _xifexpression_1 = (completion + suffix);
      } else {
        _xifexpression_1 = completion;
      }
      completion = _xifexpression_1;
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(completion, context);
      acceptor.accept(_createCompletionProposal);
    };
    columns.forEach(_function);
  }
  
  @Override
  public void completeTableDefinitionModel_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeTableDefinitionModel_Table(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeProcedureDefinitionModel_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeProcedureDefinitionModel_Table(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  @Override
  public void completeFunctionDefinitionModel_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeFunctionDefinitionModel_Table(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completePojogenProperty_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptCheckConstraints(model, context, acceptor);
  }
  
  @Override
  public void completePojogenProperty_DbProcedure(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbProcedure(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  @Override
  public void completePojogenProperty_DbFunction(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbFunction(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeTableAssignement_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeTableAssignement_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "->");
  }
  
  @Override
  public void completeInheritanceAssignement_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeInheritanceAssignement_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "->");
  }
  
  @Override
  public void completePojogenProperty_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completePojogenProperty_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeMetagenProperty_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completePojogenProperty_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || ((!(model instanceof PojogenProperty)) && (!(model instanceof Property))))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, null);
    }
  }
  
  @Override
  public void completePojogenProperty_DbColumns(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || ((!(model instanceof PojogenProperty)) && (!(model instanceof Property))))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, null);
    }
  }
  
  @Override
  public void completeImplementsAssignement_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignement_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeExtendsAssignement_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignement_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeImplementsAssignement_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignement_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeExtendsAssignement_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignement_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeImplementsAssignementGenerics_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignementGenerics_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeExtendsAssignementGenerics_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignementGenerics_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeImplementsAssignementGenerics_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignementGenerics_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeExtendsAssignementGenerics_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignementGenerics_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeColumnTypeAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || ((!(model instanceof PojogenProperty)) && (!(model instanceof Property))))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    } else {
      String _dbProcedure = prop.getDbProcedure();
      boolean _notEquals_1 = (!Objects.equal(_dbProcedure, null));
      if (_notEquals_1) {
        String _dbProcedure_1 = prop.getDbProcedure();
        List<String> _procColumns = this.dbResolver.getProcColumns(model, _dbProcedure_1);
        this.acceptColumns(_procColumns, context, acceptor, null, "->");
      } else {
        String _dbFunction = prop.getDbFunction();
        boolean _notEquals_2 = (!Objects.equal(_dbFunction, null));
        if (_notEquals_2) {
          String _dbFunction_1 = prop.getDbFunction();
          List<String> _funColumns = this.dbResolver.getFunColumns(model, _dbFunction_1);
          this.acceptColumns(_funColumns, context, acceptor, null, "->");
        }
      }
    }
  }
  
  @Override
  public void completeColumnAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || ((!(model instanceof PojogenProperty)) && (!(model instanceof Property))))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
      String _dbTable_2 = prop.getDbTable();
      List<String> _checkColumns = this.dbResolver.getCheckColumns(model, _dbTable_2);
      this.acceptColumns(_checkColumns, context, acceptor, null, "->");
    }
  }
  
  @Override
  public void completeImportAssignement_PkTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ImportAssignement)))) {
      super.completeImportAssignement_PkTable(model, assignment, context, acceptor);
      return;
    }
    final ImportAssignement imp = ((ImportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if (((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(imp.getDbColumn(), null)))) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-many-to-one", _name);
      if (_equals) {
        this.acceptTables(model, context, acceptor, "");
      } else {
        String _dbTable = prop.getDbTable();
        List<DbImport> _dbImports = this.dbResolver.getDbImports(model, _dbTable);
        final Consumer<DbImport> _function = (DbImport dbImport) -> {
          if (((!Objects.equal(dbImport.getFkColumn(), null)) && dbImport.getFkColumn().equals(imp.getDbColumn()))) {
            IValueConverterService _valueConverter = this.getValueConverter();
            String _pkTable = dbImport.getPkTable();
            final String proposal = _valueConverter.toString(_pkTable, "IDENT");
            ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
            acceptor.accept(_createCompletionProposal);
          }
        };
        _dbImports.forEach(_function);
      }
    }
  }
  
  @Override
  public void completeImportAssignement_PkColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ImportAssignement)))) {
      super.completeImportAssignement_PkColumn(model, assignment, context, acceptor);
      return;
    }
    final ImportAssignement imp = ((ImportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if ((((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(imp.getDbColumn(), null))) && (!Objects.equal(imp.getPkTable(), null)))) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-many-to-one", _name);
      if (_equals) {
        String _pkTable = imp.getPkTable();
        List<String> _columns = this.dbResolver.getColumns(model, _pkTable);
        this.acceptColumns(_columns, context, acceptor, null, null);
      } else {
        String _dbTable = prop.getDbTable();
        List<DbImport> _dbImports = this.dbResolver.getDbImports(model, _dbTable);
        final Consumer<DbImport> _function = (DbImport dbImport) -> {
          if (((!Objects.equal(dbImport.getFkColumn(), null)) && dbImport.getFkColumn().equals(imp.getDbColumn()))) {
            if (((!Objects.equal(dbImport.getPkTable(), null)) && dbImport.getPkTable().equals(imp.getPkTable()))) {
              IValueConverterService _valueConverter = this.getValueConverter();
              String _pkColumn = dbImport.getPkColumn();
              final String proposal = _valueConverter.toString(_pkColumn, "IDENT");
              ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
              acceptor.accept(_createCompletionProposal);
            }
          }
        };
        _dbImports.forEach(_function);
      }
    }
  }
  
  @Override
  public void completeImportAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || ((!(model instanceof PojogenProperty)) && (!(model instanceof Property))))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    }
  }
  
  @Override
  public void completeExportAssignement_FkTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ExportAssignement)))) {
      super.completeExportAssignement_FkTable(model, assignment, context, acceptor);
      return;
    }
    final ExportAssignement exp = ((ExportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if (((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(exp.getDbColumn(), null)))) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-one-to-many", _name);
      if (_equals) {
        this.acceptTables(model, context, acceptor, "");
      } else {
        String _dbTable = prop.getDbTable();
        List<DbExport> _dbExports = this.dbResolver.getDbExports(model, _dbTable);
        final Consumer<DbExport> _function = (DbExport dbExport) -> {
          if (((!Objects.equal(dbExport.getPkColumn(), null)) && dbExport.getPkColumn().equals(exp.getDbColumn()))) {
            IValueConverterService _valueConverter = this.getValueConverter();
            String _fkTable = dbExport.getFkTable();
            final String proposal = _valueConverter.toString(_fkTable, "IDENT");
            ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
            acceptor.accept(_createCompletionProposal);
          }
        };
        _dbExports.forEach(_function);
      }
    }
  }
  
  @Override
  public void completeExportAssignement_FkColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ExportAssignement)))) {
      super.completeExportAssignement_FkColumn(model, assignment, context, acceptor);
      return;
    }
    final ExportAssignement exp = ((ExportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if ((((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(exp.getDbColumn(), null))) && (!Objects.equal(exp.getFkTable(), null)))) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-one-to-many", _name);
      if (_equals) {
        String _fkTable = exp.getFkTable();
        List<String> _columns = this.dbResolver.getColumns(model, _fkTable);
        this.acceptColumns(_columns, context, acceptor, null, null);
      } else {
        String _dbTable = prop.getDbTable();
        List<DbExport> _dbExports = this.dbResolver.getDbExports(model, _dbTable);
        final Consumer<DbExport> _function = (DbExport dbExport) -> {
          if (((!Objects.equal(dbExport.getPkColumn(), null)) && dbExport.getPkColumn().equals(exp.getDbColumn()))) {
            if (((!Objects.equal(dbExport.getFkTable(), null)) && dbExport.getFkTable().equals(exp.getFkTable()))) {
              IValueConverterService _valueConverter = this.getValueConverter();
              String _fkColumn = dbExport.getFkColumn();
              final String proposal = _valueConverter.toString(_fkColumn, "IDENT");
              ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
              acceptor.accept(_createCompletionProposal);
            }
          }
        };
        _dbExports.forEach(_function);
      }
    }
  }
  
  @Override
  public void completeExportAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || ((!(model instanceof PojogenProperty)) && (!(model instanceof Property))))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    }
  }
  
  @Override
  public void completeManyToManyAssignement_PkColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || ((!(model instanceof PojogenProperty)) && (!(model instanceof Property))))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    }
  }
  
  @Override
  public void completeManyToManyAssignement_PkTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ManyToManyAssignement)))) {
      super.completeManyToManyAssignement_PkTable(model, assignment, context, acceptor);
      return;
    }
    final ManyToManyAssignement many2 = ((ManyToManyAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if (((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(many2.getPkColumn(), null)))) {
      String _dbTable = prop.getDbTable();
      List<DbImport> _dbImports = this.dbResolver.getDbImports(model, _dbTable);
      final Consumer<DbImport> _function = (DbImport dbImport) -> {
        if (((!Objects.equal(dbImport.getPkColumn(), null)) && dbImport.getPkColumn().equals(many2.getPkColumn()))) {
          IValueConverterService _valueConverter = this.getValueConverter();
          String _pkTable = dbImport.getPkTable();
          final String proposal = _valueConverter.toString(_pkTable, "IDENT");
          ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
          acceptor.accept(_createCompletionProposal);
        }
      };
      _dbImports.forEach(_function);
    }
  }
  
  @Override
  public void completeInheritanceAssignement_DbColumns(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof InheritanceAssignement)))) {
      super.completeInheritanceAssignement_DbColumns(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, null);
    }
  }
  
  private final ArrayList<String> methods = CollectionLiterals.<String>newArrayList("toString", "hashCode", "equals", "isDef", "toInit", "enumDef", "enumInit", "index", "procId", "enumIndex");
  
  @Override
  public void completePojogenProperty_Methods(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((!(model instanceof PojogenProperty))) {
      super.completePojogenProperty_Methods(model, assignment, context, acceptor);
      return;
    }
    final Consumer<String> _function = (String method) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(method, "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    };
    this.methods.forEach(_function);
  }
  
  @Override
  public void completeShowColumnTypeAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || ((!(model instanceof PojogenProperty)) && (!(model instanceof Property))))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    } else {
      String _dbProcedure = prop.getDbProcedure();
      boolean _notEquals_1 = (!Objects.equal(_dbProcedure, null));
      if (_notEquals_1) {
        String _dbProcedure_1 = prop.getDbProcedure();
        List<String> _procColumns = this.dbResolver.getProcColumns(model, _dbProcedure_1);
        this.acceptColumns(_procColumns, context, acceptor, null, "->");
      } else {
        String _dbFunction = prop.getDbFunction();
        boolean _notEquals_2 = (!Objects.equal(_dbFunction, null));
        if (_notEquals_2) {
          String _dbFunction_1 = prop.getDbFunction();
          List<String> _funColumns = this.dbResolver.getFunColumns(model, _dbFunction_1);
          this.acceptColumns(_funColumns, context, acceptor, null, "->");
        }
      }
    }
  }
  
  @Override
  public void completeShowColumnTypeAssignement_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ShowColumnTypeAssignement)))) {
      super.completeShowColumnTypeAssignement_Type(model, assignment, context, acceptor);
      return;
    }
    final ShowColumnTypeAssignement prop = ((ShowColumnTypeAssignement) model);
    final PojogenProperty prop2 = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    String type = ((String) null);
    String _dbTable = prop2.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop2.getDbTable();
      String _dbColumn = prop.getDbColumn();
      String _type = this.dbResolver.getType(model, _dbTable_1, _dbColumn);
      type = _type;
    } else {
      String _dbProcedure = prop2.getDbProcedure();
      boolean _notEquals_1 = (!Objects.equal(_dbProcedure, null));
      if (_notEquals_1) {
        String _dbProcedure_1 = prop2.getDbProcedure();
        String _dbColumn_1 = prop.getDbColumn();
        String _type_1 = this.dbResolver.getType(model, _dbProcedure_1, _dbColumn_1);
        type = _type_1;
      } else {
        String _dbFunction = prop2.getDbFunction();
        boolean _notEquals_2 = (!Objects.equal(_dbFunction, null));
        if (_notEquals_2) {
          String _dbFunction_1 = prop2.getDbFunction();
          String _dbColumn_2 = prop.getDbColumn();
          String _type_2 = this.dbResolver.getType(model, _dbFunction_1, _dbColumn_2);
          type = _type_2;
        }
      }
    }
    boolean _notEquals_3 = (!Objects.equal(type, null));
    if (_notEquals_3) {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString((("\"" + type) + "\""), "PropertyValue");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    }
  }
  
  @Override
  public void completeJoinTableAssignement_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeJoinTableAssignement_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "->");
  }
  
  @Override
  public void completeJoinTableAssignement_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeJoinTableAssignement_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public Set<PojoEntity> listEntities(final ResourceSet resourceSet, final IScope scope) {
    final Comparator<PojoEntity> _function = (PojoEntity o1, PojoEntity o2) -> {
      String _name = o1.getName();
      String _name_1 = o2.getName();
      return _name.compareTo(_name_1);
    };
    final TreeSet<PojoEntity> result = CollectionLiterals.<PojoEntity>newTreeSet(_function);
    Iterable<IEObjectDescription> _allElements = scope.getAllElements();
    final Consumer<IEObjectDescription> _function_1 = (IEObjectDescription description) -> {
      URI _eObjectURI = description.getEObjectURI();
      EObject _eObject = resourceSet.getEObject(_eObjectURI, true);
      final org.sqlproc.model.processorModel.Package packageDeclaration = ((org.sqlproc.model.processorModel.Package) _eObject);
      EList<AbstractEntity> _elements = packageDeclaration.getElements();
      final Consumer<AbstractEntity> _function_2 = (AbstractEntity aEntity) -> {
        if ((aEntity instanceof AnnotatedEntity)) {
          AnnotatedEntity ae = ((AnnotatedEntity) aEntity);
          Entity _entity = ae.getEntity();
          if ((_entity instanceof PojoEntity)) {
            Entity _entity_1 = ae.getEntity();
            result.add(((PojoEntity) _entity_1));
          }
        }
      };
      _elements.forEach(_function_2);
    };
    _allElements.forEach(_function_1);
    return result;
  }
  
  /**
   * def Set<PojoDefinitionModel> listPojos(ResourceSet resourceSet, IScope scope) {
   * val result = <PojoDefinitionModel>newTreeSet[o1, o2|o1.name.compareTo(o2.name)]
   * scope.getAllElements().forEach [ description |
   * val pojo = resourceSet.getEObject(description.getEObjectURI(), true) as PojoDefinitionModel
   * result.add(pojo)
   * ]
   * return result
   * }
   * 
   * def Set<TableDefinitionModel> listTables(ResourceSet resourceSet, IScope scope) {
   * val result = <TableDefinitionModel>newTreeSet[o1, o2|o1.name.compareTo(o2.name)]
   * scope.getAllElements().forEach [ description |
   * val table = resourceSet.getEObject(description.getEObjectURI(), true) as TableDefinitionModel
   * result.add(table)
   * ]
   * return result
   * }
   */
  @Override
  public void completeMetagenProperty_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeMetagenProperty_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeMetagenProperty_DbFunction(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbFunction(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeMetagenProperty_DbProcedure(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbProcedure(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  @Override
  public void completeMetagenProperty_Sequence(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_Sequence(model, assignment, context, acceptor);
      return;
    }
    this.acceptSequences(model, context, acceptor);
  }
  
  @Override
  public void completeMetaTypeAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || ((!(model instanceof MetagenProperty)) && (!(model instanceof Property))))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    MetagenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getMetagen();
    } else {
      _xifexpression = ((MetagenProperty) model);
    }
    final MetagenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    List<String> _columns = this.dbResolver.getColumns(model, _dbTable);
    this.acceptColumns(_columns, context, acceptor, null, null);
  }
  
  @Override
  public void completeDaogenProperty_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDaogenProperty_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeMetagenProperty_DbColumns(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof MetagenProperty)))) {
      super.completeMetagenProperty_DbColumns(model, assignment, context, acceptor);
      return;
    }
    final MetagenProperty prop = ((MetagenProperty) model);
    String _dbTable = prop.getDbTable();
    List<String> _columns = this.dbResolver.getColumns(model, _dbTable);
    this.acceptColumns(_columns, context, acceptor, null, null);
  }
  
  @Override
  public void completeDatabaseMetaInfoAssignement_DbMetaInfo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseMetaInfoAssignement_DbMetaInfo(model, assignment, context, acceptor);
      return;
    }
    String dbMetaInfo = this.dbResolver.getDbMetaInfo(model);
    boolean _notEquals = (!Objects.equal(dbMetaInfo, null));
    if (_notEquals) {
      dbMetaInfo = (("\"" + dbMetaInfo) + "\"");
    }
    IValueConverterService _valueConverter = this.getValueConverter();
    final String proposal = _valueConverter.toString(dbMetaInfo, "PropertyValue");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void completeDriverMetaInfoAssignement_DbDriverInfo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDriverMetaInfoAssignement_DbDriverInfo(model, assignment, context, acceptor);
      return;
    }
    String dbDriverInfo = this.dbResolver.getDbDriverInfo(model);
    boolean _notEquals = (!Objects.equal(dbDriverInfo, null));
    if (_notEquals) {
      dbDriverInfo = (("\"" + dbDriverInfo) + "\"");
    }
    IValueConverterService _valueConverter = this.getValueConverter();
    final String proposal = _valueConverter.toString(dbDriverInfo, "PropertyValue");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void completeDriverMethodOutputAssignement_DriverMethod(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof DatabaseProperty)))) {
      super.completeDriverMethodOutputAssignement_DriverMethod(model, assignment, context, acceptor);
      return;
    }
    Set<String> _driverMethods = this.dbResolver.getDriverMethods(model);
    final Consumer<String> _function = (String driverMetod) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(driverMetod, "PropertyValue");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal((proposal + "->"), context);
      acceptor.accept(_createCompletionProposal);
    };
    _driverMethods.forEach(_function);
  }
  
  @Override
  public void completeDriverMethodOutputAssignement_CallOutput(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof DriverMethodOutputAssignement)))) {
      super.completeDriverMethodOutputAssignement_CallOutput(model, assignment, context, acceptor);
      return;
    }
    final DriverMethodOutputAssignement prop = ((DriverMethodOutputAssignement) model);
    Object _elvis = null;
    String _driverMethod = prop.getDriverMethod();
    Object _driverMethodOutput = this.dbResolver.getDriverMethodOutput(model, _driverMethod);
    if (_driverMethodOutput != null) {
      _elvis = _driverMethodOutput;
    } else {
      _elvis = "null";
    }
    Object methodCallOutput = _elvis;
    IValueConverterService _valueConverter = this.getValueConverter();
    final String proposal = _valueConverter.toString((("\"" + methodCallOutput) + "\""), "PropertyValue");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void completeDatabaseTypeAssignement_DbType(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseTypeAssignement_DbType(model, assignment, context, acceptor);
      return;
    }
    final String dbMetaInfo = this.dbResolver.getDbMetaInfo(model);
    DbResolver.DbType[] _fromDbMetaInfo = DbResolver.DbType.fromDbMetaInfo(dbMetaInfo);
    final Consumer<DbResolver.DbType> _function = (DbResolver.DbType dbType) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      String _value = dbType.getValue();
      final String proposal = _valueConverter.toString(_value, "PropertyValue");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    };
    ((List<DbResolver.DbType>)Conversions.doWrapArray(_fromDbMetaInfo)).forEach(_function);
  }
  
  @Override
  public void completeDatabaseCatalogAssignement_DbCatalog(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseCatalogAssignement_DbCatalog(model, assignment, context, acceptor);
      return;
    }
    List<String> _catalogs = this.dbResolver.getCatalogs(model);
    final Consumer<String> _function = (String catalog) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(catalog, "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    };
    _catalogs.forEach(_function);
  }
  
  @Override
  public void completeDatabaseSchemaAssignement_DbSchema(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseSchemaAssignement_DbSchema(model, assignment, context, acceptor);
      return;
    }
    List<String> _schemas = this.dbResolver.getSchemas(model);
    final Consumer<String> _function = (String schema) -> {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(schema, "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    };
    _schemas.forEach(_function);
  }
  
  @Override
  public void completeDebugLevelAssignement_Debug(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.addProposalList(this.DEBUG_LEVELS, "DEBUG_LEVELS", context, acceptor, null);
  }
  
  @Override
  public void completeProcedurePojoAssignement_DbProcedure(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeProcedurePojoAssignement_DbProcedure(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  @Override
  public void completeFunctionPojoAssignement_DbFunction(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeFunctionPojoAssignement_DbFunction(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completePojogenProperty_DbCheckConstraints(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbCheckConstraints(model, assignment, context, acceptor);
      return;
    }
    this.acceptCheckConstraints(model, context, acceptor);
  }
}
