/**
 * generated by Xtext
 */
package org.sqlproc.model.jvmmodel;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmPrimitiveType;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.sqlproc.model.processorModel.AnnotatedEntity;
import org.sqlproc.model.processorModel.AnnotatedFeature;
import org.sqlproc.model.processorModel.Annotation;
import org.sqlproc.model.processorModel.AnnotationDirective;
import org.sqlproc.model.processorModel.AnnotationDirectiveAttribute;
import org.sqlproc.model.processorModel.AnnotationDirectiveConflict;
import org.sqlproc.model.processorModel.AnnotationDirectiveConstructor;
import org.sqlproc.model.processorModel.AnnotationDirectiveGetter;
import org.sqlproc.model.processorModel.AnnotationDirectiveSetter;
import org.sqlproc.model.processorModel.AnnotationDirectiveStandard;
import org.sqlproc.model.processorModel.AnnotationDirectiveStatic;
import org.sqlproc.model.processorModel.DaoDirective;
import org.sqlproc.model.processorModel.DaoDirectiveCrud;
import org.sqlproc.model.processorModel.DaoDirectiveDiscriminator;
import org.sqlproc.model.processorModel.DaoDirectivePojo;
import org.sqlproc.model.processorModel.DaoDirectiveQuery;
import org.sqlproc.model.processorModel.DaoEntity;
import org.sqlproc.model.processorModel.DaoFunProcDirective;
import org.sqlproc.model.processorModel.DescendantAssignment;
import org.sqlproc.model.processorModel.DirectiveProperties;
import org.sqlproc.model.processorModel.Entity;
import org.sqlproc.model.processorModel.EnumDirective;
import org.sqlproc.model.processorModel.EnumEntity;
import org.sqlproc.model.processorModel.Extends;
import org.sqlproc.model.processorModel.Feature;
import org.sqlproc.model.processorModel.Implements;
import org.sqlproc.model.processorModel.ImplementsExtendsDirective;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveExceptDaos;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveExceptPojos;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveGenerics;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveOnlyDaos;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveOnlyPojos;
import org.sqlproc.model.processorModel.IndexType;
import org.sqlproc.model.processorModel.PackageDirective;
import org.sqlproc.model.processorModel.PackageDirectiveImplementation;
import org.sqlproc.model.processorModel.PojoAttribute;
import org.sqlproc.model.processorModel.PojoAttributeDirective;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveCreateCol;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveEnumDef;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveEnumIndex;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveEnumInit;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveIndex;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveIsDef;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveIsPojo;
import org.sqlproc.model.processorModel.PojoAttributeDirectivePrimaryKey;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveRequired;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveToInit;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveUpdateCol;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveVersion;
import org.sqlproc.model.processorModel.PojoDirective;
import org.sqlproc.model.processorModel.PojoDirectiveDiscriminator;
import org.sqlproc.model.processorModel.PojoDirectiveEnumIndex;
import org.sqlproc.model.processorModel.PojoDirectiveEquals;
import org.sqlproc.model.processorModel.PojoDirectiveHashCode;
import org.sqlproc.model.processorModel.PojoDirectiveIndex;
import org.sqlproc.model.processorModel.PojoDirectiveOperators;
import org.sqlproc.model.processorModel.PojoDirectiveProcessingId;
import org.sqlproc.model.processorModel.PojoDirectiveSerializable;
import org.sqlproc.model.processorModel.PojoDirectiveToString;
import org.sqlproc.model.processorModel.PojoEntity;
import org.sqlproc.model.processorModel.ValueType;
import org.sqlproc.plugin.lib.util.CommonUtils;

@SuppressWarnings("all")
public class ProcessorGeneratorUtils {
  public boolean isGenerics(final Implements impl) {
    EList<ImplementsExtendsDirective> _directives = impl.getDirectives();
    ImplementsExtendsDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = (ImplementsExtendsDirective x) -> {
        return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveGenerics));
      };
      _findFirst=IterableExtensions.<ImplementsExtendsDirective>findFirst(_directives, _function);
    }
    final ImplementsExtendsDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isRequired(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveRequired));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isIndex(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveIndex));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveIndex d = ((PojoAttributeDirectiveIndex) _findFirst);
    return (!Objects.equal(d, null));
  }
  
  public String getIndex(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveIndex));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveIndex d = ((PojoAttributeDirectiveIndex) _findFirst);
    if ((Objects.equal(d, null) || Objects.equal(d.getIndex(), null))) {
      return null;
    }
    IndexType _index = d.getIndex();
    String _id = _index.getId();
    boolean _notEquals = (!Objects.equal(_id, null));
    if (_notEquals) {
      IndexType _index_1 = d.getIndex();
      return _index_1.getId();
    }
    IndexType _index_2 = d.getIndex();
    int _number = _index_2.getNumber();
    return ("" + Integer.valueOf(_number));
  }
  
  public boolean isEnumIndex(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveEnumIndex));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveEnumIndex d = ((PojoAttributeDirectiveEnumIndex) _findFirst);
    return (!Objects.equal(d, null));
  }
  
  public String getEnumIndex(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveEnumIndex));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveEnumIndex d = ((PojoAttributeDirectiveEnumIndex) _findFirst);
    if ((Objects.equal(d, null) || Objects.equal(d.getIndex(), null))) {
      return null;
    }
    IndexType _index = d.getIndex();
    String _id = _index.getId();
    boolean _notEquals = (!Objects.equal(_id, null));
    if (_notEquals) {
      IndexType _index_1 = d.getIndex();
      return _index_1.getId();
    }
    IndexType _index_2 = d.getIndex();
    int _number = _index_2.getNumber();
    return ("" + Integer.valueOf(_number));
  }
  
  public String getUpdateColumn1(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveUpdateCol));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveUpdateCol d = ((PojoAttributeDirectiveUpdateCol) _findFirst);
    String _updateColumn1 = null;
    if (d!=null) {
      _updateColumn1=d.getUpdateColumn1();
    }
    return _updateColumn1;
  }
  
  public PojoAttribute getUpdateColumn2(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveUpdateCol));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveUpdateCol d = ((PojoAttributeDirectiveUpdateCol) _findFirst);
    PojoAttribute _updateColumn2 = null;
    if (d!=null) {
      _updateColumn2=d.getUpdateColumn2();
    }
    return _updateColumn2;
  }
  
  public PojoAttribute getCreateColumn1(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveCreateCol));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveCreateCol d = ((PojoAttributeDirectiveCreateCol) _findFirst);
    PojoAttribute _createColumn1 = null;
    if (d!=null) {
      _createColumn1=d.getCreateColumn1();
    }
    return _createColumn1;
  }
  
  public String getCreateColumn2(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveCreateCol));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveCreateCol d = ((PojoAttributeDirectiveCreateCol) _findFirst);
    String _createColumn2 = null;
    if (d!=null) {
      _createColumn2=d.getCreateColumn2();
    }
    return _createColumn2;
  }
  
  public boolean isPrimaryKey(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectivePrimaryKey));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public PojoAttributeDirectivePrimaryKey getPrimaryKeyDir(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectivePrimaryKey));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectivePrimaryKey d = ((PojoAttributeDirectivePrimaryKey) _findFirst);
    return d;
  }
  
  public boolean isOptLock(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveVersion));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isList(final PojoAttribute f) {
    JvmParameterizedTypeReference _type = null;
    if (f!=null) {
      _type=f.getType();
    }
    String _simpleName = null;
    if (_type!=null) {
      _simpleName=_type.getSimpleName();
    }
    final String name = _simpleName;
    return name.startsWith("List<");
  }
  
  public boolean isNative(final PojoAttribute f) {
    boolean _xifexpression = false;
    if (((!Objects.equal(f.getType(), null)) && (f.getType().getType() instanceof JvmPrimitiveType))) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isToInit(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveToInit));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isEnumInit(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveEnumInit));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isIsDef(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveIsDef));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isEnumDef(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveEnumDef));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isPojo(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = (PojoAttributeDirective x) -> {
        return Boolean.valueOf((x instanceof PojoAttributeDirectiveIsPojo));
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveIsPojo d = ((PojoAttributeDirectiveIsPojo) _findFirst);
    return (!Objects.equal(d, null));
  }
  
  protected String _constName(final PojoAttribute attr) {
    String _name = attr.getName();
    return this.constantName(_name);
  }
  
  protected String _constName(final List<PojoAttribute> l) {
    final StringBuilder result = new StringBuilder("");
    boolean first = true;
    for (final PojoAttribute attr : l) {
      {
        if (first) {
          first = false;
        } else {
          result.append("_");
        }
        String _name = attr.getName();
        String _constantName = this.constantName(_name);
        result.append(_constantName);
      }
    }
    return result.toString();
  }
  
  public String constantName(final String name) {
    final StringBuilder result = new StringBuilder("");
    char[] _charArray = name.toCharArray();
    for (final char c : _charArray) {
      boolean _isUpperCase = Character.isUpperCase(c);
      if (_isUpperCase) {
        result.append("_");
        result.append(c);
      } else {
        char _upperCase = Character.toUpperCase(c);
        result.append(_upperCase);
      }
    }
    return result.toString();
  }
  
  public String dbName(final String name) {
    final StringBuilder result = new StringBuilder("");
    boolean lastDigit = false;
    char[] _charArray = name.toCharArray();
    for (final char c : _charArray) {
      {
        if ((Character.isUpperCase(c) || (Character.isDigit(c) && (!lastDigit)))) {
          result.append("_");
          result.append(c);
        } else {
          char _upperCase = Character.toUpperCase(c);
          result.append(_upperCase);
        }
        boolean _isDigit = Character.isDigit(c);
        lastDigit = _isDigit;
      }
    }
    final String s = result.toString();
    boolean _startsWith = s.startsWith("_");
    if (_startsWith) {
      return s.substring(1);
    }
    return s;
  }
  
  public EList<Annotation> annotations(final PojoEntity it) {
    EList<Annotation> _xblockexpression = null;
    {
      final AnnotatedEntity an = EcoreUtil2.<AnnotatedEntity>getContainerOfType(it, AnnotatedEntity.class);
      _xblockexpression = an.getAnnotations();
    }
    return _xblockexpression;
  }
  
  public boolean hasOperators(final PojoEntity pojo) {
    EList<PojoDirective> _directives = pojo.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
        return Boolean.valueOf((x instanceof PojoDirectiveOperators));
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public String getOperatorsSuffix(final PojoEntity pojo) {
    EList<PojoDirective> _directives = pojo.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
        return Boolean.valueOf((x instanceof PojoDirectiveOperators));
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveOperators d = ((PojoDirectiveOperators) _findFirst);
    String _operatorsSuffix = null;
    if (d!=null) {
      _operatorsSuffix=d.getOperatorsSuffix();
    }
    return _operatorsSuffix;
  }
  
  public Integer getSernum(final PojoEntity pojo) {
    EList<PojoDirective> _directives = pojo.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
        return Boolean.valueOf((x instanceof PojoDirectiveSerializable));
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveSerializable d = ((PojoDirectiveSerializable) _findFirst);
    Integer _xifexpression = null;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = Integer.valueOf(d.getSernum());
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public String getDiscriminator(final PojoEntity pojo) {
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
        return Boolean.valueOf((x instanceof PojoDirectiveDiscriminator));
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveDiscriminator d = ((PojoDirectiveDiscriminator) _findFirst);
    String _discriminator = null;
    if (d!=null) {
      _discriminator=d.getDiscriminator();
    }
    return _discriminator;
  }
  
  public PojoAttribute getOptLock(final PojoEntity pojo) {
    EList<AnnotatedFeature> _features = null;
    if (pojo!=null) {
      _features=pojo.getFeatures();
    }
    List<Feature> _map = null;
    if (_features!=null) {
      final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
        return it.getFeature();
      };
      _map=ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    }
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute x) -> {
      return Boolean.valueOf(this.isOptLock(x));
    };
    final PojoAttribute fea = IterableExtensions.<PojoAttribute>findFirst(_filter, _function_1);
    boolean _notEquals = (!Objects.equal(fea, null));
    if (_notEquals) {
      return fea;
    }
    JvmParameterizedTypeReference _superType = null;
    if (pojo!=null) {
      _superType=pojo.getSuperType();
    }
    final JvmParameterizedTypeReference se = _superType;
    if ((Objects.equal(se, null) || (!(se instanceof PojoEntity)))) {
      return null;
    }
    return this.getOptLock(((PojoEntity) se));
  }
  
  public Map<String, List<PojoAttribute>> getIndex(final PojoEntity pojo) {
    final Map<String, List<PojoAttribute>> result = new TreeMap<String, List<PojoAttribute>>();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
      return Boolean.valueOf((x instanceof PojoDirectiveIndex));
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Consumer<PojoDirective> _function_1 = (PojoDirective it) -> {
      final PojoDirectiveIndex d = ((PojoDirectiveIndex) it);
      IndexType _index = d.getIndex();
      boolean _notEquals = (!Objects.equal(_index, null));
      if (_notEquals) {
        IndexType _index_1 = d.getIndex();
        String _id = _index_1.getId();
        boolean _notEquals_1 = (!Objects.equal(_id, null));
        if (_notEquals_1) {
          IndexType _index_2 = d.getIndex();
          String _id_1 = _index_2.getId();
          DirectiveProperties _proplist = d.getProplist();
          EList<Feature> _features = _proplist.getFeatures();
          Iterable<PojoAttribute> _filter_1 = Iterables.<PojoAttribute>filter(_features, PojoAttribute.class);
          List<PojoAttribute> _list = IterableExtensions.<PojoAttribute>toList(_filter_1);
          result.put(_id_1, _list);
        } else {
          IndexType _index_3 = d.getIndex();
          int _number = _index_3.getNumber();
          String _plus = ("" + Integer.valueOf(_number));
          DirectiveProperties _proplist_1 = d.getProplist();
          EList<Feature> _features_1 = _proplist_1.getFeatures();
          Iterable<PojoAttribute> _filter_2 = Iterables.<PojoAttribute>filter(_features_1, PojoAttribute.class);
          List<PojoAttribute> _list_1 = IterableExtensions.<PojoAttribute>toList(_filter_2);
          result.put(_plus, _list_1);
        }
      } else {
        DirectiveProperties _proplist_2 = d.getProplist();
        EList<Feature> _features_2 = _proplist_2.getFeatures();
        final String name = this.constName(_features_2);
        DirectiveProperties _proplist_3 = d.getProplist();
        EList<Feature> _features_3 = _proplist_3.getFeatures();
        Iterable<PojoAttribute> _filter_3 = Iterables.<PojoAttribute>filter(_features_3, PojoAttribute.class);
        List<PojoAttribute> _list_2 = IterableExtensions.<PojoAttribute>toList(_filter_3);
        result.put(name, _list_2);
      }
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public Map<String, List<PojoAttribute>> getEnumIndex(final PojoEntity pojo) {
    final Map<String, List<PojoAttribute>> result = new TreeMap<String, List<PojoAttribute>>();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
      return Boolean.valueOf((x instanceof PojoDirectiveEnumIndex));
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Consumer<PojoDirective> _function_1 = (PojoDirective it) -> {
      final PojoDirectiveEnumIndex d = ((PojoDirectiveEnumIndex) it);
      IndexType _index = d.getIndex();
      boolean _notEquals = (!Objects.equal(_index, null));
      if (_notEquals) {
        IndexType _index_1 = d.getIndex();
        String _id = _index_1.getId();
        boolean _notEquals_1 = (!Objects.equal(_id, null));
        if (_notEquals_1) {
          IndexType _index_2 = d.getIndex();
          String _id_1 = _index_2.getId();
          DirectiveProperties _proplist = d.getProplist();
          EList<Feature> _features = _proplist.getFeatures();
          Iterable<PojoAttribute> _filter_1 = Iterables.<PojoAttribute>filter(_features, PojoAttribute.class);
          List<PojoAttribute> _list = IterableExtensions.<PojoAttribute>toList(_filter_1);
          result.put(_id_1, _list);
        } else {
          IndexType _index_3 = d.getIndex();
          int _number = _index_3.getNumber();
          String _plus = ("" + Integer.valueOf(_number));
          DirectiveProperties _proplist_1 = d.getProplist();
          EList<Feature> _features_1 = _proplist_1.getFeatures();
          Iterable<PojoAttribute> _filter_2 = Iterables.<PojoAttribute>filter(_features_1, PojoAttribute.class);
          List<PojoAttribute> _list_1 = IterableExtensions.<PojoAttribute>toList(_filter_2);
          result.put(_plus, _list_1);
        }
      } else {
        DirectiveProperties _proplist_2 = d.getProplist();
        EList<Feature> _features_2 = _proplist_2.getFeatures();
        final String name = this.constName(_features_2);
        DirectiveProperties _proplist_3 = d.getProplist();
        EList<Feature> _features_3 = _proplist_3.getFeatures();
        Iterable<PojoAttribute> _filter_3 = Iterables.<PojoAttribute>filter(_features_3, PojoAttribute.class);
        List<PojoAttribute> _list_2 = IterableExtensions.<PojoAttribute>toList(_filter_3);
        result.put(name, _list_2);
      }
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<PojoAttribute> toStringAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> result = CollectionLiterals.<PojoAttribute>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
      return Boolean.valueOf((x instanceof PojoDirectiveToString));
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Consumer<PojoDirective> _function_1 = (PojoDirective it) -> {
      final PojoDirectiveToString d = ((PojoDirectiveToString) it);
      DirectiveProperties _proplist = d.getProplist();
      EList<Feature> _features = _proplist.getFeatures();
      Iterable<PojoAttribute> _filter_1 = Iterables.<PojoAttribute>filter(_features, PojoAttribute.class);
      Iterables.<PojoAttribute>addAll(result, _filter_1);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<PojoAttribute> processingIdsAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> result = CollectionLiterals.<PojoAttribute>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
      return Boolean.valueOf((x instanceof PojoDirectiveProcessingId));
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Consumer<PojoDirective> _function_1 = (PojoDirective it) -> {
      final PojoDirectiveProcessingId d = ((PojoDirectiveProcessingId) it);
      DirectiveProperties _proplist = d.getProplist();
      EList<Feature> _features = _proplist.getFeatures();
      Iterable<PojoAttribute> _filter_1 = Iterables.<PojoAttribute>filter(_features, PojoAttribute.class);
      Iterables.<PojoAttribute>addAll(result, _filter_1);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<PojoAttribute> equalsAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> result = CollectionLiterals.<PojoAttribute>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
      return Boolean.valueOf((x instanceof PojoDirectiveEquals));
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Consumer<PojoDirective> _function_1 = (PojoDirective it) -> {
      final PojoDirectiveEquals d = ((PojoDirectiveEquals) it);
      DirectiveProperties _proplist = d.getProplist();
      EList<Feature> _features = _proplist.getFeatures();
      Iterable<PojoAttribute> _filter_1 = Iterables.<PojoAttribute>filter(_features, PojoAttribute.class);
      Iterables.<PojoAttribute>addAll(result, _filter_1);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<PojoAttribute> hashCodeAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> result = CollectionLiterals.<PojoAttribute>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = (PojoDirective x) -> {
      return Boolean.valueOf((x instanceof PojoDirectiveHashCode));
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Consumer<PojoDirective> _function_1 = (PojoDirective it) -> {
      final PojoDirectiveHashCode d = ((PojoDirectiveHashCode) it);
      DirectiveProperties _proplist = d.getProplist();
      EList<Feature> _features = _proplist.getFeatures();
      Iterable<PojoAttribute> _filter_1 = Iterables.<PojoAttribute>filter(_features, PojoAttribute.class);
      Iterables.<PojoAttribute>addAll(result, _filter_1);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public PojoEntity getParentReflectInheritance(final PojoEntity pojo) {
    String _discriminator = this.getDiscriminator(pojo);
    boolean _notEquals = (!Objects.equal(_discriminator, null));
    if (_notEquals) {
      return null;
    }
    return this.getParent(pojo);
  }
  
  public PojoEntity getParent(final PojoEntity pojo) {
    JvmParameterizedTypeReference _superType = null;
    if (pojo!=null) {
      _superType=pojo.getSuperType();
    }
    final JvmParameterizedTypeReference superType = _superType;
    boolean _equals = Objects.equal(superType, null);
    if (_equals) {
      return null;
    }
    if ((superType instanceof PojoEntity)) {
      return ((PojoEntity) superType);
    }
    final org.sqlproc.model.processorModel.Package pkg = EcoreUtil2.<org.sqlproc.model.processorModel.Package>getContainerOfType(pojo, org.sqlproc.model.processorModel.Package.class);
    final String name = superType.getSimpleName();
    List<AnnotatedEntity> _contentsOfType = CommonUtils.<AnnotatedEntity>getContentsOfType(pkg, AnnotatedEntity.class);
    final Function1<AnnotatedEntity, Boolean> _function = (AnnotatedEntity p) -> {
      Entity _entity = p.getEntity();
      String _name = _entity.getName();
      return Boolean.valueOf(Objects.equal(_name, name));
    };
    final AnnotatedEntity _pojo = IterableExtensions.<AnnotatedEntity>findFirst(_contentsOfType, _function);
    boolean _notEquals = (!Objects.equal(_pojo, null));
    if (_notEquals) {
      Entity _entity = _pojo.getEntity();
      return ((PojoEntity) _entity);
    }
    return null;
  }
  
  public List<PojoAttribute> allRequiredAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> features = CollectionLiterals.<PojoAttribute>newArrayList();
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return features;
    }
    final PojoEntity se = this.getParent(pojo);
    boolean _notEquals = (!Objects.equal(se, null));
    if (_notEquals) {
      List<PojoAttribute> _allRequiredAttributes = this.allRequiredAttributes(se);
      features.addAll(_allRequiredAttributes);
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute x) -> {
      return Boolean.valueOf(this.isRequired(x));
    };
    Iterable<PojoAttribute> _filter_1 = IterableExtensions.<PojoAttribute>filter(_filter, _function_1);
    List<PojoAttribute> _list = IterableExtensions.<PojoAttribute>toList(_filter_1);
    features.addAll(_list);
    return features;
  }
  
  public List<PojoAttribute> requiredAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> features = CollectionLiterals.<PojoAttribute>newArrayList();
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return features;
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute x) -> {
      return Boolean.valueOf(this.isRequired(x));
    };
    Iterable<PojoAttribute> _filter_1 = IterableExtensions.<PojoAttribute>filter(_filter, _function_1);
    List<PojoAttribute> _list = IterableExtensions.<PojoAttribute>toList(_filter_1);
    features.addAll(_list);
    return features;
  }
  
  public List<PojoAttribute> parentRequiredAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> features = CollectionLiterals.<PojoAttribute>newArrayList();
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return features;
    }
    final PojoEntity se = this.getParent(pojo);
    boolean _notEquals = (!Objects.equal(se, null));
    if (_notEquals) {
      List<PojoAttribute> _allRequiredAttributes = this.allRequiredAttributes(se);
      features.addAll(_allRequiredAttributes);
    }
    return features;
  }
  
  public List<PojoAttribute> allAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter);
    final PojoEntity se = this.getParent(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoAttribute> _allAttributes = this.allAttributes(se);
    features.addAll(_allAttributes);
    return features;
  }
  
  public Map<String, PojoAttribute> allAttributesAsMap(final PojoEntity pojo) {
    final TreeMap<String, PojoAttribute> result = new TreeMap<String, PojoAttribute>();
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return result;
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Consumer<PojoAttribute> _function_1 = (PojoAttribute it) -> {
      String _name = it.getName();
      result.put(_name, it);
    };
    _filter.forEach(_function_1);
    final PojoEntity se = this.getParent(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return result;
    }
    Map<String, PojoAttribute> _allAttributesAsMap = this.allAttributesAsMap(se);
    result.putAll(_allAttributesAsMap);
    return result;
  }
  
  public List<PojoAttribute> toInitAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute x) -> {
      return Boolean.valueOf(this.isToInit(x));
    };
    Iterable<PojoAttribute> _filter_1 = IterableExtensions.<PojoAttribute>filter(_filter, _function_1);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter_1);
    final PojoEntity se = this.getParent(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoAttribute> _initAttributes = this.toInitAttributes(se);
    features.addAll(_initAttributes);
    return features;
  }
  
  public List<PojoAttribute> enumInitAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute x) -> {
      return Boolean.valueOf(this.isEnumInit(x));
    };
    Iterable<PojoAttribute> _filter_1 = IterableExtensions.<PojoAttribute>filter(_filter, _function_1);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter_1);
    final PojoEntity se = this.getParent(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoAttribute> _enumInitAttributes = this.enumInitAttributes(se);
    features.addAll(_enumInitAttributes);
    return features;
  }
  
  public List<PojoAttribute> isDefAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute x) -> {
      return Boolean.valueOf(this.isIsDef(x));
    };
    Iterable<PojoAttribute> _filter_1 = IterableExtensions.<PojoAttribute>filter(_filter, _function_1);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter_1);
    final PojoEntity se = this.getParent(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoAttribute> _isDefAttributes = this.isDefAttributes(se);
    features.addAll(_isDefAttributes);
    return features;
  }
  
  public List<PojoAttribute> enumDefAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute x) -> {
      return Boolean.valueOf(this.isEnumDef(x));
    };
    Iterable<PojoAttribute> _filter_1 = IterableExtensions.<PojoAttribute>filter(_filter, _function_1);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter_1);
    final PojoEntity se = this.getParent(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoAttribute> _enumDefAttributes = this.enumDefAttributes(se);
    features.addAll(_enumDefAttributes);
    return features;
  }
  
  public boolean hasIsDef(final PojoEntity pojo) {
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute f) -> {
      return Boolean.valueOf((this.isIsDef(f) || this.isEnumDef(f)));
    };
    final PojoAttribute result = IterableExtensions.<PojoAttribute>findFirst(_filter, _function_1);
    boolean _notEquals = (!Objects.equal(result, null));
    if (_notEquals) {
      return true;
    }
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    if ((Objects.equal(se, null) || (!(se instanceof PojoEntity)))) {
      return false;
    }
    return this.hasIsDef(((PojoEntity) se));
  }
  
  public boolean hasToInit(final PojoEntity pojo) {
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute f) -> {
      return Boolean.valueOf((this.isToInit(f) || this.isEnumInit(f)));
    };
    final PojoAttribute result = IterableExtensions.<PojoAttribute>findFirst(_filter, _function_1);
    boolean _notEquals = (!Objects.equal(result, null));
    if (_notEquals) {
      return true;
    }
    final PojoEntity se = this.getParent(pojo);
    boolean _equals = Objects.equal(se, null);
    if (_equals) {
      return false;
    }
    return this.hasIsDef(se);
  }
  
  public PojoAttribute getAttribute(final PojoEntity pojo, final String name) {
    if ((Objects.equal(pojo, null) || Objects.equal(name, null))) {
      return null;
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute x) -> {
      String _name = x.getName();
      return Boolean.valueOf(Objects.equal(_name, name));
    };
    final PojoAttribute feature = IterableExtensions.<PojoAttribute>findFirst(_filter, _function_1);
    boolean _notEquals = (!Objects.equal(feature, null));
    if (_notEquals) {
      return feature;
    }
    final PojoEntity se = this.getParent(pojo);
    boolean _equals = Objects.equal(se, null);
    if (_equals) {
      return null;
    }
    return this.getAttribute(se, name);
  }
  
  public PojoAttribute getPrimaryKey(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return null;
    }
    EList<AnnotatedFeature> _features = pojo.getFeatures();
    final Function1<AnnotatedFeature, Feature> _function = (AnnotatedFeature it) -> {
      return it.getFeature();
    };
    List<Feature> _map = ListExtensions.<AnnotatedFeature, Feature>map(_features, _function);
    Iterable<PojoAttribute> _filter = Iterables.<PojoAttribute>filter(_map, PojoAttribute.class);
    final Function1<PojoAttribute, Boolean> _function_1 = (PojoAttribute f) -> {
      return Boolean.valueOf(this.isPrimaryKey(f));
    };
    final PojoAttribute result = IterableExtensions.<PojoAttribute>findFirst(_filter, _function_1);
    boolean _notEquals = (!Objects.equal(result, null));
    if (_notEquals) {
      return result;
    }
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    if ((Objects.equal(se, null) || (!(se instanceof PojoEntity)))) {
      return null;
    }
    return this.getPrimaryKey(((PojoEntity) se));
  }
  
  public EList<Annotation> annotations(final EnumEntity it) {
    EList<Annotation> _xblockexpression = null;
    {
      final AnnotatedEntity an = EcoreUtil2.<AnnotatedEntity>getContainerOfType(it, AnnotatedEntity.class);
      _xblockexpression = an.getAnnotations();
    }
    return _xblockexpression;
  }
  
  public Integer getSernum(final EnumEntity enum_) {
    EList<EnumDirective> _directives = enum_.getDirectives();
    EnumDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<EnumDirective, Boolean> _function = (EnumDirective x) -> {
        return Boolean.valueOf((x instanceof PojoDirectiveSerializable));
      };
      _findFirst=IterableExtensions.<EnumDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveSerializable d = ((PojoDirectiveSerializable) _findFirst);
    Integer _xifexpression = null;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = Integer.valueOf(d.getSernum());
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public EList<Annotation> annotations(final DaoEntity it) {
    EList<Annotation> _xblockexpression = null;
    {
      final AnnotatedEntity an = EcoreUtil2.<AnnotatedEntity>getContainerOfType(it, AnnotatedEntity.class);
      _xblockexpression = an.getAnnotations();
    }
    return _xblockexpression;
  }
  
  public Integer getSernum(final DaoEntity dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = (DaoDirective x) -> {
        return Boolean.valueOf((x instanceof PojoDirectiveSerializable));
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveSerializable d = ((PojoDirectiveSerializable) _findFirst);
    Integer _xifexpression = null;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = Integer.valueOf(d.getSernum());
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public DaoEntity getParent(final DaoEntity pojo) {
    JvmParameterizedTypeReference _superType = null;
    if (pojo!=null) {
      _superType=pojo.getSuperType();
    }
    final JvmParameterizedTypeReference superType = _superType;
    boolean _equals = Objects.equal(superType, null);
    if (_equals) {
      return null;
    }
    if ((superType instanceof DaoEntity)) {
      return ((DaoEntity) superType);
    }
    final org.sqlproc.model.processorModel.Package pkg = EcoreUtil2.<org.sqlproc.model.processorModel.Package>getContainerOfType(pojo, org.sqlproc.model.processorModel.Package.class);
    List<DaoEntity> _eAllOfType = null;
    if (pkg!=null) {
      _eAllOfType=EcoreUtil2.<DaoEntity>eAllOfType(pkg, DaoEntity.class);
    }
    DaoEntity _findFirst = null;
    if (_eAllOfType!=null) {
      final Function1<DaoEntity, Boolean> _function = (DaoEntity d) -> {
        String _name = d.getName();
        String _simpleName = superType.getSimpleName();
        return Boolean.valueOf(Objects.equal(_name, _simpleName));
      };
      _findFirst=IterableExtensions.<DaoEntity>findFirst(_eAllOfType, _function);
    }
    final DaoEntity _dao = _findFirst;
    boolean _notEquals = (!Objects.equal(_dao, null));
    if (_notEquals) {
      return _dao;
    }
    return null;
  }
  
  public Map<String, Map<String, JvmParameterizedTypeReference>> getMoreResultClasses(final DaoEntity dao) {
    final Map<String, Map<String, JvmParameterizedTypeReference>> result = new TreeMap<String, Map<String, JvmParameterizedTypeReference>>();
    EList<DaoDirective> _directives = null;
    if (dao!=null) {
      _directives=dao.getDirectives();
    }
    final Function1<DaoDirective, Boolean> _function = (DaoDirective x) -> {
      return Boolean.valueOf((x instanceof DaoDirectiveDiscriminator));
    };
    Iterable<DaoDirective> _filter = IterableExtensions.<DaoDirective>filter(_directives, _function);
    final Consumer<DaoDirective> _function_1 = (DaoDirective it) -> {
      final DaoDirectiveDiscriminator d = ((DaoDirectiveDiscriminator) it);
      final Map<String, JvmParameterizedTypeReference> map = new TreeMap<String, JvmParameterizedTypeReference>();
      EList<DescendantAssignment> _descendants = d.getDescendants();
      final Consumer<DescendantAssignment> _function_2 = (DescendantAssignment dd) -> {
        ValueType _value = dd.getValue();
        String _value0 = this.value0(_value);
        JvmParameterizedTypeReference _descendant = dd.getDescendant();
        map.put(_value0, _descendant);
      };
      _descendants.forEach(_function_2);
      PojoAttribute _ancestor = d.getAncestor();
      String _name = _ancestor.getName();
      result.put(_name, map);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public DaoDirective getPojoDirectiveIndirect(final DaoEntity dao) {
    EList<DaoDirective> _directives = null;
    if (dao!=null) {
      _directives=dao.getDirectives();
    }
    final Function1<DaoDirective, Boolean> _function = (DaoDirective x) -> {
      return Boolean.valueOf((((x instanceof DaoDirectiveCrud) || 
        (x instanceof DaoDirectiveQuery)) || (x instanceof DaoFunProcDirective)));
    };
    return IterableExtensions.<DaoDirective>findFirst(_directives, _function);
  }
  
  public String getFunProcName(final DaoEntity dao) {
    String pojoName = dao.getName();
    boolean _endsWith = pojoName.endsWith("Dao");
    if (_endsWith) {
      int _length = pojoName.length();
      int _minus = (_length - 3);
      String _substring = pojoName.substring(0, _minus);
      pojoName = _substring;
    }
    return StringExtensions.toFirstLower(pojoName);
  }
  
  public PojoEntity getPojoImplicit(final DaoEntity dao) {
    String pojoName = dao.getName();
    boolean _endsWith = pojoName.endsWith("Dao");
    if (_endsWith) {
      int _length = pojoName.length();
      int _minus = (_length - 3);
      String _substring = pojoName.substring(0, _minus);
      pojoName = _substring;
    }
    return null;
  }
  
  public PojoEntity getPojo(final DaoEntity dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    for (final DaoDirective dir : _directives) {
      if ((dir instanceof DaoDirectiveCrud)) {
        return ((DaoDirectiveCrud) dir).getPojo();
      } else {
        if ((dir instanceof DaoDirectiveQuery)) {
          return ((DaoDirectiveQuery) dir).getPojo();
        } else {
          if ((dir instanceof DaoDirectivePojo)) {
            return ((DaoDirectivePojo) dir).getPojo();
          }
        }
      }
    }
    return this.getPojoImplicit(dao);
  }
  
  public boolean isCRUD(final DaoEntity dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = (DaoDirective x) -> {
        return Boolean.valueOf((x instanceof DaoDirectiveCrud));
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final DaoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isQuery(final DaoEntity dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = (DaoDirective x) -> {
        return Boolean.valueOf((x instanceof DaoDirectiveQuery));
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final DaoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isFunctionProcedure(final DaoEntity dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = (DaoDirective x) -> {
        return Boolean.valueOf((x instanceof DaoFunProcDirective));
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final DaoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<DaoFunProcDirective> listFunctionsDirectives(final DaoEntity dao) {
    final List<DaoFunProcDirective> result = CollectionLiterals.<DaoFunProcDirective>newArrayList();
    EList<DaoDirective> _directives = dao.getDirectives();
    Iterable<DaoDirective> _filter = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = (DaoDirective x) -> {
        return Boolean.valueOf((x instanceof DaoFunProcDirective));
      };
      _filter=IterableExtensions.<DaoDirective>filter(_directives, _function);
    }
    final Consumer<DaoDirective> _function_1 = (DaoDirective it) -> {
      result.add(((DaoFunProcDirective) it));
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public String getImplPackage(final DaoEntity dao) {
    final org.sqlproc.model.processorModel.Package pkg = EcoreUtil2.<org.sqlproc.model.processorModel.Package>getContainerOfType(dao, org.sqlproc.model.processorModel.Package.class);
    EList<PackageDirective> _directives = null;
    if (pkg!=null) {
      _directives=pkg.getDirectives();
    }
    PackageDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PackageDirective, Boolean> _function = (PackageDirective x) -> {
        return Boolean.valueOf((x instanceof PackageDirectiveImplementation));
      };
      _findFirst=IterableExtensions.<PackageDirective>findFirst(_directives, _function);
    }
    final PackageDirectiveImplementation d = ((PackageDirectiveImplementation) _findFirst);
    String _xifexpression = null;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = d.getImplementation();
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public boolean isConflict(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = (AnnotationDirective x) -> {
        return Boolean.valueOf((x instanceof AnnotationDirectiveConflict));
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> conflictAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isConflict(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> conflictAnnotations(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isConflict(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isConstructor(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = (AnnotationDirective x) -> {
        return Boolean.valueOf((x instanceof AnnotationDirectiveConstructor));
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> constructorAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isConstructor(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> constructorAnnotations(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isConstructor(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> constructorAnnotations(final DaoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isConstructor(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isStatic(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = (AnnotationDirective x) -> {
        return Boolean.valueOf((x instanceof AnnotationDirectiveStatic));
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> staticAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isStatic(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> staticAnnotations(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isStatic(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isStandard(final Annotation an) {
    if ((Objects.equal(an.getDirectives(), null) || an.getDirectives().isEmpty())) {
      return true;
    }
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = (AnnotationDirective x) -> {
        return Boolean.valueOf((x instanceof AnnotationDirectiveStandard));
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> standardAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isStandard(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> standardAnnotations(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isStandard(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> standardAnnotations(final DaoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isStandard(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isSetter(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = (AnnotationDirective x) -> {
        return Boolean.valueOf((x instanceof AnnotationDirectiveSetter));
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> setterAnnotations(final PojoAttribute prop) {
    boolean _equals = Objects.equal(prop, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    final AnnotatedFeature aprop = EcoreUtil2.<AnnotatedFeature>getContainerOfType(prop, AnnotatedFeature.class);
    EList<Annotation> _annotations = aprop.getAnnotations();
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isSetter(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isGetter(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = (AnnotationDirective x) -> {
        return Boolean.valueOf((x instanceof AnnotationDirectiveGetter));
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> getterAnnotations(final PojoAttribute prop) {
    boolean _equals = Objects.equal(prop, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    final AnnotatedFeature aprop = EcoreUtil2.<AnnotatedFeature>getContainerOfType(prop, AnnotatedFeature.class);
    EList<Annotation> _annotations = aprop.getAnnotations();
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isGetter(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isAttribute(final Annotation an) {
    if ((Objects.equal(an.getDirectives(), null) || an.getDirectives().isEmpty())) {
      return true;
    }
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = (AnnotationDirective x) -> {
        return Boolean.valueOf((x instanceof AnnotationDirectiveAttribute));
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> attributeAnnotations(final PojoAttribute prop) {
    boolean _equals = Objects.equal(prop, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    final AnnotatedFeature aprop = EcoreUtil2.<AnnotatedFeature>getContainerOfType(prop, AnnotatedFeature.class);
    EList<Annotation> _annotations = aprop.getAnnotations();
    final Function1<Annotation, Boolean> _function = (Annotation x) -> {
      return Boolean.valueOf(this.isAttribute(x));
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<PojoEntity> onlyPojos(final Extends ext) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = (ImplementsExtendsDirective x) -> {
        return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyPojos));
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Consumer<ImplementsExtendsDirective> _function_1 = (ImplementsExtendsDirective it) -> {
      EList<PojoEntity> _onlyPojos = ((ImplementsExtendsDirectiveOnlyPojos) it).getOnlyPojos();
      result.addAll(_onlyPojos);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<PojoEntity> exceptPojos(final Extends ext) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = (ImplementsExtendsDirective x) -> {
        return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptPojos));
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Consumer<ImplementsExtendsDirective> _function_1 = (ImplementsExtendsDirective it) -> {
      EList<PojoEntity> _exceptPojos = ((ImplementsExtendsDirectiveExceptPojos) it).getExceptPojos();
      result.addAll(_exceptPojos);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<PojoEntity> onlyPojos(final Implements imp) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = (ImplementsExtendsDirective x) -> {
        return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyPojos));
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Consumer<ImplementsExtendsDirective> _function_1 = (ImplementsExtendsDirective it) -> {
      EList<PojoEntity> _onlyPojos = ((ImplementsExtendsDirectiveOnlyPojos) it).getOnlyPojos();
      result.addAll(_onlyPojos);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<PojoEntity> exceptPojos(final Implements imp) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = (ImplementsExtendsDirective x) -> {
        return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptPojos));
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Consumer<ImplementsExtendsDirective> _function_1 = (ImplementsExtendsDirective it) -> {
      EList<PojoEntity> _exceptPojos = ((ImplementsExtendsDirectiveExceptPojos) it).getExceptPojos();
      result.addAll(_exceptPojos);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<DaoEntity> onlyDaos(final Extends ext) {
    final List<DaoEntity> result = CollectionLiterals.<DaoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = (ImplementsExtendsDirective x) -> {
        return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyDaos));
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Consumer<ImplementsExtendsDirective> _function_1 = (ImplementsExtendsDirective it) -> {
      EList<DaoEntity> _onlyDaos = ((ImplementsExtendsDirectiveOnlyDaos) it).getOnlyDaos();
      result.addAll(_onlyDaos);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<DaoEntity> exceptDaos(final Extends ext) {
    final List<DaoEntity> result = CollectionLiterals.<DaoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = (ImplementsExtendsDirective x) -> {
        return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptDaos));
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Consumer<ImplementsExtendsDirective> _function_1 = (ImplementsExtendsDirective it) -> {
      EList<DaoEntity> _exceptDaos = ((ImplementsExtendsDirectiveExceptDaos) it).getExceptDaos();
      result.addAll(_exceptDaos);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<DaoEntity> onlyDaos(final Implements imp) {
    final List<DaoEntity> result = CollectionLiterals.<DaoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = (ImplementsExtendsDirective x) -> {
        return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyDaos));
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Consumer<ImplementsExtendsDirective> _function_1 = (ImplementsExtendsDirective it) -> {
      EList<DaoEntity> _onlyDaos = ((ImplementsExtendsDirectiveOnlyDaos) it).getOnlyDaos();
      result.addAll(_onlyDaos);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public List<DaoEntity> exceptDaos(final Implements imp) {
    final List<DaoEntity> result = CollectionLiterals.<DaoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = (ImplementsExtendsDirective x) -> {
        return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptDaos));
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Consumer<ImplementsExtendsDirective> _function_1 = (ImplementsExtendsDirective it) -> {
      EList<DaoEntity> _exceptDaos = ((ImplementsExtendsDirectiveExceptDaos) it).getExceptDaos();
      result.addAll(_exceptDaos);
    };
    _filter.forEach(_function_1);
    return result;
  }
  
  public String getExtends(final EnumEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      JvmParameterizedTypeReference _extends = ext.getExtends();
      return _extends.getSimpleName();
    }
    return "";
  }
  
  public boolean isImplements(final EnumEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      return true;
    }
    return false;
  }
  
  public boolean isExtends(final PojoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      {
        List<PojoEntity> _onlyPojos = this.onlyPojos(ext);
        boolean _isEmpty = _onlyPojos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<PojoEntity> _onlyPojos_1 = this.onlyPojos(ext);
          for (final PojoEntity ee : _onlyPojos_1) {
            String _name = ee.getName();
            String _name_1 = e.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              return true;
            }
          }
          return false;
        }
        List<PojoEntity> _exceptPojos = this.exceptPojos(ext);
        for (final PojoEntity ee_1 : _exceptPojos) {
          String _name_2 = ee_1.getName();
          String _name_3 = e.getName();
          boolean _equals_1 = Objects.equal(_name_2, _name_3);
          if (_equals_1) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public boolean isExtends(final PojoEntity e, final Extends ext) {
    List<PojoEntity> _onlyPojos = this.onlyPojos(ext);
    boolean _isEmpty = _onlyPojos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<PojoEntity> _onlyPojos_1 = this.onlyPojos(ext);
      for (final PojoEntity ee : _onlyPojos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<PojoEntity> _exceptPojos = this.exceptPojos(ext);
    for (final PojoEntity ee_1 : _exceptPojos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public Extends getExtends(final PojoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      boolean _isExtends = this.isExtends(e, ext);
      if (_isExtends) {
        return ext;
      }
    }
    return null;
  }
  
  public boolean isImplements(final PojoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      {
        List<PojoEntity> _exceptPojos = this.exceptPojos(ext);
        for (final PojoEntity ee : _exceptPojos) {
          String _name = ee.getName();
          String _name_1 = e.getName();
          boolean _equals = Objects.equal(_name, _name_1);
          if (_equals) {
            return false;
          }
        }
        List<PojoEntity> _onlyPojos = this.onlyPojos(ext);
        boolean _isEmpty = _onlyPojos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<PojoEntity> _onlyPojos_1 = this.onlyPojos(ext);
          for (final PojoEntity ee_1 : _onlyPojos_1) {
            String _name_2 = ee_1.getName();
            String _name_3 = e.getName();
            boolean _equals_1 = Objects.equal(_name_2, _name_3);
            if (_equals_1) {
              return true;
            }
          }
        } else {
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean isImplements(final PojoEntity e, final Implements ext) {
    List<PojoEntity> _onlyPojos = this.onlyPojos(ext);
    boolean _isEmpty = _onlyPojos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<PojoEntity> _onlyPojos_1 = this.onlyPojos(ext);
      for (final PojoEntity ee : _onlyPojos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<PojoEntity> _exceptPojos = this.exceptPojos(ext);
    for (final PojoEntity ee_1 : _exceptPojos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public List<Implements> getImplements(final PojoEntity e) {
    final List<Implements> list = CollectionLiterals.<Implements>newArrayList();
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      boolean _isImplements = this.isImplements(e, ext);
      if (_isImplements) {
        list.add(ext);
      }
    }
    return list;
  }
  
  public boolean isExtends(final DaoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      {
        List<DaoEntity> _onlyDaos = this.onlyDaos(ext);
        boolean _isEmpty = _onlyDaos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<DaoEntity> _onlyDaos_1 = this.onlyDaos(ext);
          for (final DaoEntity ee : _onlyDaos_1) {
            String _name = ee.getName();
            String _name_1 = e.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              return true;
            }
          }
          return false;
        }
        List<DaoEntity> _exceptDaos = this.exceptDaos(ext);
        for (final DaoEntity ee_1 : _exceptDaos) {
          String _name_2 = ee_1.getName();
          String _name_3 = e.getName();
          boolean _equals_1 = Objects.equal(_name_2, _name_3);
          if (_equals_1) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public boolean isExtends(final DaoEntity e, final Extends ext) {
    List<DaoEntity> _onlyDaos = this.onlyDaos(ext);
    boolean _isEmpty = _onlyDaos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<DaoEntity> _onlyDaos_1 = this.onlyDaos(ext);
      for (final DaoEntity ee : _onlyDaos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<DaoEntity> _exceptDaos = this.exceptDaos(ext);
    for (final DaoEntity ee_1 : _exceptDaos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public Extends getExtends(final DaoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      boolean _isExtends = this.isExtends(e, ext);
      if (_isExtends) {
        return ext;
      }
    }
    return null;
  }
  
  public boolean isImplements(final DaoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      {
        List<DaoEntity> _exceptDaos = this.exceptDaos(ext);
        for (final DaoEntity ee : _exceptDaos) {
          String _name = ee.getName();
          String _name_1 = e.getName();
          boolean _equals = Objects.equal(_name, _name_1);
          if (_equals) {
            return false;
          }
        }
        List<DaoEntity> _onlyDaos = this.onlyDaos(ext);
        boolean _isEmpty = _onlyDaos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<DaoEntity> _onlyDaos_1 = this.onlyDaos(ext);
          for (final DaoEntity ee_1 : _onlyDaos_1) {
            String _name_2 = ee_1.getName();
            String _name_3 = e.getName();
            boolean _equals_1 = Objects.equal(_name_2, _name_3);
            if (_equals_1) {
              return true;
            }
          }
        } else {
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean isImplements(final DaoEntity e, final Implements ext) {
    List<DaoEntity> _onlyDaos = this.onlyDaos(ext);
    boolean _isEmpty = _onlyDaos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<DaoEntity> _onlyDaos_1 = this.onlyDaos(ext);
      for (final DaoEntity ee : _onlyDaos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<DaoEntity> _exceptDaos = this.exceptDaos(ext);
    for (final DaoEntity ee_1 : _exceptDaos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public List<Implements> getImplements(final DaoEntity e) {
    final List<Implements> list = CollectionLiterals.<Implements>newArrayList();
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      boolean _isImplements = this.isImplements(e, ext);
      if (_isImplements) {
        list.add(ext);
      }
    }
    return list;
  }
  
  public String value(final ValueType pv) {
    boolean _equals = Objects.equal(pv, null);
    if (_equals) {
      return null;
    }
    String s = pv.getValue();
    boolean _notEquals = (!Objects.equal(s, null));
    if (_notEquals) {
      String _trim = s.trim();
      s = _trim;
      boolean _startsWith = s.startsWith("\"");
      boolean _not = (!_startsWith);
      if (_not) {
        s = ("\"" + s);
      }
      boolean _endsWith = s.endsWith("\"");
      boolean _not_1 = (!_endsWith);
      if (_not_1) {
        s = (s + "\"");
      }
      return s;
    } else {
      String _id = pv.getId();
      boolean _notEquals_1 = (!Objects.equal(_id, null));
      if (_notEquals_1) {
        return pv.getId();
      } else {
        int _number = pv.getNumber();
        return ("" + Integer.valueOf(_number));
      }
    }
  }
  
  public String value0(final ValueType pv) {
    boolean _equals = Objects.equal(pv, null);
    if (_equals) {
      return null;
    }
    String s = pv.getValue();
    boolean _notEquals = (!Objects.equal(s, null));
    if (_notEquals) {
      String _trim = s.trim();
      s = _trim;
      return s;
    } else {
      String _id = pv.getId();
      boolean _notEquals_1 = (!Objects.equal(_id, null));
      if (_notEquals_1) {
        return pv.getId();
      } else {
        int _number = pv.getNumber();
        return ("" + Integer.valueOf(_number));
      }
    }
  }
  
  public String getSimpleName(final JvmParameterizedTypeReference ref) {
    JvmType _type = ref.getType();
    String _simpleName = _type.getSimpleName();
    final StringBuilder name = new StringBuilder(_simpleName);
    if (((!Objects.equal(ref.getArguments(), null)) && (!ref.getArguments().isEmpty()))) {
      name.append("<");
      boolean first = true;
      EList<JvmTypeReference> _arguments = ref.getArguments();
      for (final JvmTypeReference arg : _arguments) {
        {
          if (first) {
            first = false;
          } else {
            name.append(",");
          }
          String _simpleName_1 = arg.getSimpleName();
          name.append(_simpleName_1);
        }
      }
      name.append(">");
    }
    return name.toString();
  }
  
  public String hashForPrimitive(final PojoAttribute f) {
    if ((Objects.equal(f.getType(), null) || (!(f.getType().getType() instanceof JvmPrimitiveType)))) {
      return "0";
    }
    JvmParameterizedTypeReference _type = f.getType();
    JvmType _type_1 = _type.getType();
    final String name = ((JvmPrimitiveType) _type_1).getSimpleName();
    boolean _equals = Objects.equal(name, "boolean");
    if (_equals) {
      String _name = f.getName();
      String _plus = ("(" + _name);
      return (_plus + " ? 0 : 1)");
    }
    boolean _equals_1 = Objects.equal(name, "byte");
    if (_equals_1) {
      return f.getName();
    }
    boolean _equals_2 = Objects.equal(name, "char");
    if (_equals_2) {
      return f.getName();
    }
    boolean _equals_3 = Objects.equal(name, "double");
    if (_equals_3) {
      String _name_1 = f.getName();
      String _plus_1 = ("Double.doubleToLongBits(" + _name_1);
      return (_plus_1 + ")");
    }
    boolean _equals_4 = Objects.equal(name, "float");
    if (_equals_4) {
      String _name_2 = f.getName();
      String _plus_2 = ("Float.floatToIntBits(" + _name_2);
      return (_plus_2 + ")");
    }
    boolean _equals_5 = Objects.equal(name, "int");
    if (_equals_5) {
      return f.getName();
    }
    boolean _equals_6 = Objects.equal(name, "long");
    if (_equals_6) {
      String _name_3 = f.getName();
      String _plus_3 = ("((int) (" + _name_3);
      String _plus_4 = (_plus_3 + " ^ (");
      String _name_4 = f.getName();
      String _plus_5 = (_plus_4 + _name_4);
      return (_plus_5 + " >> 32)))");
    }
    boolean _equals_7 = Objects.equal(name, "short");
    if (_equals_7) {
      return f.getName();
    }
    return "0";
  }
  
  public String wrapperPrimitive(final String name) {
    boolean _equals = Objects.equal(name, "boolean");
    if (_equals) {
      return "Boolean";
    }
    boolean _equals_1 = Objects.equal(name, "byte");
    if (_equals_1) {
      return "Byte";
    }
    boolean _equals_2 = Objects.equal(name, "char");
    if (_equals_2) {
      return "Char";
    }
    boolean _equals_3 = Objects.equal(name, "double");
    if (_equals_3) {
      return "Double";
    }
    boolean _equals_4 = Objects.equal(name, "float");
    if (_equals_4) {
      return "Float";
    }
    boolean _equals_5 = Objects.equal(name, "int");
    if (_equals_5) {
      return "Integer";
    }
    boolean _equals_6 = Objects.equal(name, "long");
    if (_equals_6) {
      return "Long";
    }
    boolean _equals_7 = Objects.equal(name, "short");
    if (_equals_7) {
      return "Short";
    }
    return name;
  }
  
  public String notEmptyCondition(final String name) {
    boolean _equals = Objects.equal(name, "boolean");
    if (_equals) {
      return "Boolean";
    }
    boolean _equals_1 = Objects.equal(name, "byte");
    if (_equals_1) {
      return "Byte";
    }
    boolean _equals_2 = Objects.equal(name, "char");
    if (_equals_2) {
      return "Char";
    }
    boolean _equals_3 = Objects.equal(name, "double");
    if (_equals_3) {
      return "Double";
    }
    boolean _equals_4 = Objects.equal(name, "float");
    if (_equals_4) {
      return "Float";
    }
    boolean _equals_5 = Objects.equal(name, "int");
    if (_equals_5) {
      return "Integer";
    }
    boolean _equals_6 = Objects.equal(name, "long");
    if (_equals_6) {
      return "Long";
    }
    boolean _equals_7 = Objects.equal(name, "short");
    if (_equals_7) {
      return "Short";
    }
    return name;
  }
  
  public String zero(final String name) {
    String _upperCase = name.toUpperCase();
    boolean _equals = Objects.equal(_upperCase, "LONG");
    if (_equals) {
      return "0L";
    }
    return "0";
  }
  
  public String constName(final Object attr) {
    if (attr instanceof PojoAttribute) {
      return _constName((PojoAttribute)attr);
    } else if (attr instanceof List) {
      return _constName((List<PojoAttribute>)attr);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(attr).toString());
    }
  }
}
