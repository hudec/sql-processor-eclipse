/*
 * generated by Xtext
 */
package org.sqlproc.dsl.ui.contentassist;

import static org.sqlproc.dsl.util.Constants.COLUMN_USAGE;
import static org.sqlproc.dsl.util.Constants.COLUMN_USAGE_EXTENDED;
import static org.sqlproc.dsl.util.Constants.CONSTANT_USAGE;
import static org.sqlproc.dsl.util.Constants.CONSTANT_USAGE_EXTENDED;
import static org.sqlproc.dsl.util.Constants.IDENTIFIER_USAGE;
import static org.sqlproc.dsl.util.Constants.IDENTIFIER_USAGE_EXTENDED;
import static org.sqlproc.dsl.util.Constants.MAPPING_USAGE;
import static org.sqlproc.dsl.util.Constants.MAPPING_USAGE_EXTENDED;
import static org.sqlproc.dsl.util.Constants.TABLE_USAGE;

import java.beans.PropertyDescriptor;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.sqlproc.dsl.processorDsl.AbstractPojoEntity;
import org.sqlproc.dsl.processorDsl.Artifacts;
import org.sqlproc.dsl.processorDsl.Column;
import org.sqlproc.dsl.processorDsl.DatabaseProperty;
import org.sqlproc.dsl.processorDsl.DriverMethodOutputAssignement;
import org.sqlproc.dsl.processorDsl.ExportAssignement;
import org.sqlproc.dsl.processorDsl.ExtendedColumn;
import org.sqlproc.dsl.processorDsl.ExtendedMappingItem;
import org.sqlproc.dsl.processorDsl.ImportAssignement;
import org.sqlproc.dsl.processorDsl.InheritanceAssignement;
import org.sqlproc.dsl.processorDsl.ManyToManyAssignement;
import org.sqlproc.dsl.processorDsl.MappingColumn;
import org.sqlproc.dsl.processorDsl.MappingRule;
import org.sqlproc.dsl.processorDsl.MetaStatement;
import org.sqlproc.dsl.processorDsl.MetagenProperty;
import org.sqlproc.dsl.processorDsl.PackageDeclaration;
import org.sqlproc.dsl.processorDsl.PojoDefinition;
import org.sqlproc.dsl.processorDsl.PojoEntity;
import org.sqlproc.dsl.processorDsl.PojoProperty;
import org.sqlproc.dsl.processorDsl.PojogenProperty;
import org.sqlproc.dsl.processorDsl.ProcessorDslPackage;
import org.sqlproc.dsl.processorDsl.ShowColumnTypeAssignement;
import org.sqlproc.dsl.processorDsl.TableDefinition;
import org.sqlproc.dsl.resolver.DbExport;
import org.sqlproc.dsl.resolver.DbImport;
import org.sqlproc.dsl.resolver.DbResolver;
import org.sqlproc.dsl.resolver.DbResolver.DbType;
import org.sqlproc.dsl.resolver.PojoResolver;
import org.sqlproc.dsl.util.Utils;

import com.google.inject.Inject;

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class ProcessorDslProposalProvider extends AbstractProcessorDslProposalProvider {

    @Inject
    PojoResolver pojoResolver;

    @Inject
    DbResolver dbResolver;

    @Inject
    IQualifiedNameConverter qualifiedNameConverter;

    private static final List<String> STATEMENT_TYPE = Arrays.asList(new String[] { "QRY", "CRUD", "CALL" });
    private static final List<String> MAPPING_TYPE = Arrays.asList(new String[] { "OUT" });
    private static final List<String> OPTION_TYPE = Arrays
            .asList(new String[] { "OPT", "LOPT", "IOPT", "SOPT", "BOPT" });
    private static final List<String> TYPES = Arrays.asList(new String[] { "int", "integer", "long", "byte", "short",
            "float", "double", "character", "char", "string", "str", "time", "date", "datetime", "timestamp", "stamp",
            "bool", "boolean", "bigint", "biginteger", "bigdec", "bigdecimal", "bytearr", "bytearray", "bytes", "text",
            "blob", "clob", "einteger", "eint", "enumstring", "estring", "fromdate", "todate", "cursor", "other" });
    // , "h_big_decimal",
    // "h_big_integer", "h_blob", "h_boolean", "h_binary", "h_byte", "h_clob", "h_timestamp", "h_date",
    // "h_double", "h_float", "h_date", "h_character", "h_integer", "h_long", "h_short", "h_string", "h_text",
    // "h_timestamp", "h_time" });
    private static final List<String> MODIFIERS = Arrays.asList(new String[] { "any", "null", "notnull", "seq", "seq=",
            "idsel", "idsel=", "id", "isDef=", "isCall=", "dtype=", "gtype=", "discr" });
    private static final List<String> F_TYPES = Arrays.asList(new String[] { "set", "update", "values", "where" });
    private static final List<String> DEBUG_LEVELS = Arrays.asList(new String[] { "DEBUG", "INFO", "FATAL", "ERROR",
            "WARN", "TRACE" });

    @Override
    public void completeMetaStatement_Type(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        addProposalList(STATEMENT_TYPE, "STATEMENT_TYPE", context, acceptor, null);
    }

    @Override
    public void completeMappingRule_Type(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        addProposalList(MAPPING_TYPE, "MAPPING_TYPE", context, acceptor, null);
    }

    @Override
    public void completeOptionalFeature_Type(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        addProposalList(OPTION_TYPE, "OPTION_TYPE", context, acceptor, null);
    }

    protected void addProposalList(List<String> values, String lexerRule, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor, String prefix) {
        if (values == null)
            return;
        for (String value : values) {
            String proposal = getValueConverter().toString((prefix != null) ? prefix + value : value, lexerRule);
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeMetaSql_Ftype(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        addProposalList(F_TYPES, "IDENT", context, acceptor, null);
    }

    @Override
    public void completeExtendedColumnName_Name(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        Column column = EcoreUtil2.getContainerOfType(model, Column.class);
        StringBuilder partialName = new StringBuilder("");
        if (column != null) {
            for (ExtendedColumn xcolumn : column.getColumns()) {
                // System.out.println("AAA " + xcolumn + " " + xcolumn.getCol() + " " + model);
                if (partialName.length() > 0)
                    partialName.append(".");
                partialName.append(xcolumn.getCol().getName());
                if (context.getPreviousModel() != null && xcolumn == context.getPreviousModel()) {
                    // System.out.println("BINGO " + xcolumn.getCol().getName());
                    break;
                }
            }
        }
        // System.out.println("BBB " + partialName);
        if (partialName.length() > 0)
            partialName.append(".");
        String prefix = partialName.toString() + context.getPrefix();
        if (!completeUsage(model, assignment, context, acceptor, COLUMN_USAGE, COLUMN_USAGE_EXTENDED, prefix, true))
            super.completeExtendedColumnName_Name(model, assignment, context, acceptor);
    }

    @Override
    public void completeConstant_Name(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        String prefix = context.getPrefix();
        if (!completeUsage(model, assignment, context, acceptor, CONSTANT_USAGE, CONSTANT_USAGE_EXTENDED, prefix, false))
            super.completeConstant_Name(model, assignment, context, acceptor);
    }

    @Override
    public void completeIdentifier_Name(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        String prefix = context.getPrefix();
        if (!completeUsage(model, assignment, context, acceptor, IDENTIFIER_USAGE, IDENTIFIER_USAGE_EXTENDED, prefix,
                false))
            super.completeIdentifier_Name(model, assignment, context, acceptor);
    }

    public boolean completeUsage(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor, String usageInFilter, String usageInFilterExt, String prefix,
            boolean cutPrefix) {
        if (!isResolvePojo(model))
            return false;
        MetaStatement metaStatement = EcoreUtil2.getContainerOfType(model, MetaStatement.class);
        Artifacts artifacts = EcoreUtil2.getContainerOfType(metaStatement, Artifacts.class);

        String entityName = Utils.getTokenFromModifier(metaStatement, usageInFilterExt);
        PojoEntity pojoEntity = (entityName != null) ? Utils.findEntity(qualifiedNameConverter, artifacts,
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__POJO_PACKAGES),
                entityName) : null;
        String pojoName = (pojoEntity != null) ? null : Utils.getTokenFromModifier(metaStatement, usageInFilter);
        PojoDefinition pojoDefinition = (pojoName != null) ? Utils.findPojo(qualifiedNameConverter, artifacts,
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__POJOS), pojoName) : null;

        if (pojoDefinition == null && pojoEntity == null) {
            String proposal = getValueConverter().toString("Error: I can't load pojo for " + model, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
            return true;
        }

        int pos = prefix.lastIndexOf('.');
        if (pos > 0) {
            prefix = prefix.substring(0, pos + 1);
        } else {
            prefix = "";
        }

        if (pojoDefinition != null) {
            String clazz = getClassName(pojoDefinition.getClass_(), prefix);
            if (clazz == null)
                return false;
            PropertyDescriptor[] descriptors = pojoResolver.getPropertyDescriptors(clazz);
            if (descriptors == null) {
                return false;
            } else {
                for (PropertyDescriptor descriptor : descriptors) {
                    if ("class".equals(descriptor.getName()))
                        continue;
                    String proposal = getValueConverter().toString(descriptor.getName(), "IDENT");
                    ICompletionProposal completionProposal = createCompletionProposal((cutPrefix) ? proposal : prefix
                            + proposal, context);
                    acceptor.accept(completionProposal);
                }
                return true;
            }
        } else {

            PojoEntity entity = getPojoEntity(pojoEntity, prefix);
            List<PojoProperty> properties = getProperties(entity, null);
            if (properties.isEmpty()) {
                return false;
            }
            for (PojoProperty pojoProperty : properties) {
                String proposal = getValueConverter().toString(pojoProperty.getName(), "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal((cutPrefix) ? proposal : prefix
                        + proposal, context);
                acceptor.accept(completionProposal);
            }
            return true;
        }
    }

    @Override
    public void completeMappingColumnName_Name(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // if (!(model instanceof MappingItem)) {
        // super.completeMappingColumnName_Name(model, assignment, context, acceptor);
        // return;
        // }
        // System.out.println("55555 " + model);
        if (!isResolvePojo(model)) {
            super.completeMappingColumnName_Name(model, assignment, context, acceptor);
            return;
        }
        MappingColumn mappingColumn = EcoreUtil2.getContainerOfType(model, MappingColumn.class);
        MappingRule mappingRule = EcoreUtil2.getContainerOfType(model, MappingRule.class);
        Artifacts artifacts = EcoreUtil2.getContainerOfType(mappingRule, Artifacts.class);
        // System.out.println("55555b " + mappingColumn + " " + mappingRule + " " + artifacts);

        String entityName = Utils.getTokenFromModifier(mappingRule, MAPPING_USAGE_EXTENDED);
        PojoEntity pojoEntity = (entityName != null) ? Utils.findEntity(qualifiedNameConverter, artifacts,
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__POJO_PACKAGES),
                entityName) : null;
        String pojoName = (pojoEntity != null) ? null : Utils.getTokenFromModifier(mappingRule, MAPPING_USAGE);
        PojoDefinition pojoDefinition = (pojoName != null) ? Utils.findPojo(qualifiedNameConverter, artifacts,
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__POJOS), pojoName) : null;

        if (pojoDefinition == null && pojoEntity == null) {
            String proposal = getValueConverter().toString("Error: I can't load pojo for " + model, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }

        StringBuilder partialName = new StringBuilder("");
        boolean cutPrefix = false;
        if (model instanceof MappingColumn && mappingColumn != null) {
            cutPrefix = true;
            for (ExtendedMappingItem xmapping : mappingColumn.getItems()) {
                // System.out.println("AAA " + xmapping + " " + xmapping.getAttr() + " " + context.getCurrentModel() +
                // " "
                // + context.getPreviousModel());
                if (partialName.length() > 0)
                    partialName.append(".");
                partialName.append(xmapping.getAttr().getName());
                if (context.getPreviousModel() != null && xmapping == context.getPreviousModel()) {
                    // System.out.println("BINGO " + xmapping.getAttr());
                    break;
                }
            }
        }
        // System.out.println("BBB " + partialName);
        if (partialName.length() > 0)
            partialName.append(".");
        String prefix = partialName.toString() + context.getPrefix();
        int pos = prefix.lastIndexOf('.');
        if (pos > 0) {
            prefix = prefix.substring(0, pos + 1);
        } else {
            prefix = "";
        }

        if (pojoDefinition != null) {
            String clazz = getClassName(pojoDefinition.getClass_(), prefix);
            if (clazz == null)
                return;
            PropertyDescriptor[] descriptors = pojoResolver.getPropertyDescriptors(clazz);
            if (descriptors == null) {
                super.completeMappingColumnName_Name(model, assignment, context, acceptor);
            } else {
                for (PropertyDescriptor descriptor : descriptors) {
                    if ("class".equals(descriptor.getName()))
                        continue;
                    String proposal = getValueConverter().toString(descriptor.getName(), "IDENT");
                    ICompletionProposal completionProposal = createCompletionProposal((cutPrefix) ? proposal : prefix
                            + proposal, context);
                    acceptor.accept(completionProposal);
                }
            }
        } else {

            PojoEntity entity = getPojoEntity(pojoEntity, prefix);
            List<PojoProperty> properties = getProperties(entity, null);
            if (properties.isEmpty()) {
                return;
            }
            for (PojoProperty pojoProperty : properties) {
                String proposal = getValueConverter().toString(pojoProperty.getName(), "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal((cutPrefix) ? proposal : prefix
                        + proposal, context);
                acceptor.accept(completionProposal);
            }
        }
    }

    protected PojoEntity getPojoEntity(PojoEntity baseEntity, String property) {
        if (baseEntity == null || property == null)
            return baseEntity;
        int pos1 = property.indexOf('.');
        if (pos1 == -1)
            return baseEntity;
        String checkProperty = property;
        pos1 = checkProperty.indexOf('=');
        if (pos1 > 0) {
            int pos2 = checkProperty.indexOf('.', pos1);
            if (pos2 > pos1)
                checkProperty = checkProperty.substring(0, pos1) + checkProperty.substring(pos2);
        }
        String innerProperty = null;
        pos1 = checkProperty.indexOf('.');
        if (pos1 > 0) {
            innerProperty = checkProperty.substring(pos1 + 1);
            checkProperty = checkProperty.substring(0, pos1);
        }
        PojoProperty innerPojoProperty = null;
        for (PojoProperty pojoProperty : Utils.attributes(baseEntity)) {
            if (pojoProperty.getName().equals(checkProperty)) {
                innerPojoProperty = pojoProperty;
                break;
            }
        }
        if (innerPojoProperty == null || (innerPojoProperty.getRef() == null && innerPojoProperty.getGref() == null))
            return null;
        PojoEntity innerPojoEntity = (innerPojoProperty.getRef() != null) ? innerPojoProperty.getRef()
                : innerPojoProperty.getGref();
        return getPojoEntity(innerPojoEntity, innerProperty);
    }

    List<PojoProperty> getProperties(PojoEntity pojoEntity, List<PojoProperty> inproperties) {
        List<PojoProperty> properties = (inproperties != null) ? inproperties : new ArrayList<PojoProperty>();
        if (pojoEntity == null)
            return properties;

        for (PojoProperty pojoProperty : pojoEntity.getFeatures()) {
            if (pojoProperty.getNative() != null || pojoProperty.getRef() != null || pojoProperty.getType() != null)
                properties.add(pojoProperty);
        }

        PojoEntity superType = Utils.getSuperType(pojoEntity);
        if (superType != null)
            return getProperties(superType, properties);
        return properties;
    }

    protected boolean isPrimitive(Class<?> clazz) {
        if (clazz == null)
            return true;
        if (clazz.isPrimitive())
            return true;
        if (clazz == String.class)
            return true;
        if (clazz == java.util.Date.class)
            return true;
        if (clazz == java.sql.Date.class)
            return true;
        if (clazz == java.sql.Time.class)
            return true;
        if (clazz == java.sql.Timestamp.class)
            return true;
        if (clazz == java.sql.Blob.class)
            return true;
        if (clazz == java.sql.Clob.class)
            return true;
        if (clazz == java.math.BigDecimal.class)
            return true;
        if (clazz == java.math.BigInteger.class)
            return true;
        return false;
    }

    protected String getClassName(String baseClass, String property) {
        if (baseClass == null || property == null)
            return baseClass;
        int pos1 = property.indexOf('.');
        if (pos1 == -1)
            return baseClass;
        String checkProperty = property;
        pos1 = checkProperty.indexOf('=');
        if (pos1 > 0) {
            int pos2 = checkProperty.indexOf('.', pos1);
            if (pos2 > pos1)
                checkProperty = checkProperty.substring(0, pos1) + checkProperty.substring(pos2);
        }
        String innerProperty = null;
        pos1 = checkProperty.indexOf('.');
        if (pos1 > 0) {
            innerProperty = checkProperty.substring(pos1 + 1);
            checkProperty = checkProperty.substring(0, pos1);
        }
        PropertyDescriptor[] descriptors = pojoResolver.getPropertyDescriptors(baseClass);
        if (descriptors == null)
            return null;
        PropertyDescriptor innerDesriptor = null;
        for (PropertyDescriptor descriptor : descriptors) {
            if (descriptor.getName().equals(checkProperty)) {
                innerDesriptor = descriptor;
                break;
            }
        }
        if (innerDesriptor == null)
            return null;
        Class<?> innerClass = innerDesriptor.getPropertyType();
        if (innerClass.isArray()) {
            ParameterizedType type = (ParameterizedType) innerDesriptor.getReadMethod().getGenericReturnType();
            if (type.getActualTypeArguments() == null || type.getActualTypeArguments().length == 0)
                return null;
            innerClass = (Class<?>) type.getActualTypeArguments()[0];
            if (isPrimitive(innerClass))
                return null;
            return getClassName(innerClass.getName(), innerProperty);
        } else if (Collection.class.isAssignableFrom(innerClass)) {
            ParameterizedType type = (ParameterizedType) innerDesriptor.getReadMethod().getGenericReturnType();
            if (type.getActualTypeArguments() == null || type.getActualTypeArguments().length == 0)
                return null;
            innerClass = (Class<?>) type.getActualTypeArguments()[0];
            if (isPrimitive(innerClass))
                return null;
            return getClassName(innerClass.getName(), innerProperty);
        } else {
            if (isPrimitive(innerClass))
                return null;
            return getClassName(innerClass.getName(), innerProperty);
        }
    }

    protected boolean isResolvePojo(EObject model) {
        return pojoResolver.isResolvePojo(model);

    }

    protected boolean isResolveDb(EObject model) {
        return dbResolver.isResolveDb(model);
    }

    @Override
    public void completeTableDefinition_Table(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeTableDefinition_Table(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getTables(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void complete_DatabaseColumn(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.complete_DatabaseColumn(model, ruleCall, context, acceptor);
            return;
        }
        String prefix = context.getPrefix();
        int pos = prefix.indexOf('.');
        if (pos > 0) {
            prefix = prefix.substring(0, pos);
        } else {
            prefix = null;
        }
        MetaStatement metaStatement = EcoreUtil2.getContainerOfType(model, MetaStatement.class);
        Artifacts artifacts = EcoreUtil2.getContainerOfType(metaStatement, Artifacts.class);

        String val = Utils.getTokenFromModifier(metaStatement, TABLE_USAGE, prefix);
        TableDefinition tableDefinition = (val != null) ? Utils.findTable(qualifiedNameConverter, artifacts,
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__TABLES), val) : null;
        if (tableDefinition != null && tableDefinition.getTable() != null) {
            for (String column : dbResolver.getColumns(model, tableDefinition.getTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                String completion = prefix != null ? prefix + '.' + proposal : proposal;
                ICompletionProposal completionProposal = createCompletionProposal(completion, context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void complete_DatabaseTable(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.complete_DatabaseTable(model, ruleCall, context, acceptor);
            return;
        }
        MetaStatement metaStatement = EcoreUtil2.getContainerOfType(model, MetaStatement.class);
        Artifacts artifacts = EcoreUtil2.getContainerOfType(metaStatement, Artifacts.class);

        TableDefinition tableDefinition = null;
        List<String> vals = Utils.getTokensFromModifier(metaStatement, TABLE_USAGE);
        boolean found = false;
        for (String val : vals) {
            tableDefinition = Utils.findTable(qualifiedNameConverter, artifacts,
                    getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__TABLES), val);
            if (tableDefinition != null) {
                String proposal = getValueConverter().toString(tableDefinition.getTable(), "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                acceptor.accept(completionProposal);
                found = true;
            }
        }
        if (found)
            return;
    }

    @Override
    public void completePojogenProperty_DbTable(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completePojogenProperty_DbTable(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getTables(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeTableAssignement_DbTable(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeTableAssignement_DbTable(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getTables(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeInheritanceAssignement_DbTable(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeInheritanceAssignement_DbTable(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getTables(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completePojogenProperty_DbTables(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completePojogenProperty_DbTables(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getTables(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completePojogenProperty_DbColumn(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof PojogenProperty)) {
            super.completePojogenProperty_DbColumn(model, assignment, context, acceptor);
            return;
        }
        PojogenProperty prop = (PojogenProperty) model;
        if (prop.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completePojogenProperty_DbColumns(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof PojogenProperty)) {
            super.completePojogenProperty_DbColumns(model, assignment, context, acceptor);
            return;
        }
        PojogenProperty prop = (PojogenProperty) model;
        if (prop.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completeColumnTypeAssignement_DbColumn(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof PojogenProperty)) {
            super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
            return;
        }
        PojogenProperty prop = (PojogenProperty) model;
        if (prop.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completeColumnAssignement_DbColumn(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof PojogenProperty)) {
            super.completeColumnAssignement_DbColumn(model, assignment, context, acceptor);
            return;
        }
        PojogenProperty prop = (PojogenProperty) model;
        if (prop.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completeImportAssignement_PkTable(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof ImportAssignement)) {
            super.completeImportAssignement_PkTable(model, assignment, context, acceptor);
            return;
        }
        ImportAssignement imp = (ImportAssignement) model;
        PojogenProperty prop = EcoreUtil2.getContainerOfType(imp, PojogenProperty.class);
        if (prop.getDbTable() != null && imp.getDbColumn() != null) {
            // System.out.println("PKTABLE for " + prop.getDbTable() + " and " + imp.getDbColumn());
            if ("create-many-to-one".equals(prop.getName())) {
                for (String table : dbResolver.getTables(model)) {
                    if (table.indexOf('$') >= 0)
                        continue;
                    String proposal = getValueConverter().toString(table, "IDENT");
                    ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                    acceptor.accept(completionProposal);
                }
            } else {
                for (DbImport dbImport : dbResolver.getDbImports(model, prop.getDbTable())) {
                    if (dbImport.getFkColumn() != null && dbImport.getFkColumn().equals(imp.getDbColumn())) {
                        String proposal = getValueConverter().toString(dbImport.getPkTable(), "IDENT");
                        ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                        acceptor.accept(completionProposal);
                    }
                }
            }
        }
    }

    @Override
    public void completeImportAssignement_PkColumn(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof ImportAssignement)) {
            super.completeImportAssignement_PkColumn(model, assignment, context, acceptor);
            return;
        }
        ImportAssignement imp = (ImportAssignement) model;
        PojogenProperty prop = EcoreUtil2.getContainerOfType(imp, PojogenProperty.class);
        if (prop.getDbTable() != null && imp.getDbColumn() != null & imp.getPkTable() != null) {
            // System.out.println("PKCOLUMN for " + prop.getDbTable() + " and " + imp.getDbColumn() + " and "
            // + imp.getPkTable());
            if ("create-many-to-one".equals(prop.getName())) {
                for (String column : dbResolver.getColumns(model, imp.getPkTable())) {
                    String proposal = getValueConverter().toString(column, "IDENT");
                    ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                    acceptor.accept(completionProposal);
                }
            } else {
                for (DbImport dbImport : dbResolver.getDbImports(model, prop.getDbTable())) {
                    if (dbImport.getFkColumn() != null && dbImport.getFkColumn().equals(imp.getDbColumn())) {
                        if (dbImport.getPkTable() != null && dbImport.getPkTable().equals(imp.getPkTable())) {
                            String proposal = getValueConverter().toString(dbImport.getPkColumn(), "IDENT");
                            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                            acceptor.accept(completionProposal);
                        }
                    }
                }
            }
        }
    }

    @Override
    public void completeImportAssignement_DbColumn(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof PojogenProperty)) {
            super.completeImportAssignement_DbColumn(model, assignment, context, acceptor);
            return;
        }
        PojogenProperty prop = (PojogenProperty) model;
        if (prop.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completeExportAssignement_FkTable(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof ExportAssignement)) {
            super.completeExportAssignement_FkTable(model, assignment, context, acceptor);
            return;
        }
        ExportAssignement exp = (ExportAssignement) model;
        PojogenProperty prop = EcoreUtil2.getContainerOfType(exp, PojogenProperty.class);
        if (prop.getDbTable() != null && exp.getDbColumn() != null) {
            // System.out.println("FKTABLE for " + prop.getDbTable() + " and " + exp.getDbColumn());
            if ("create-one-to-many".equals(prop.getName())) {
                for (String table : dbResolver.getTables(model)) {
                    if (table.indexOf('$') >= 0)
                        continue;
                    String proposal = getValueConverter().toString(table, "IDENT");
                    ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                    acceptor.accept(completionProposal);
                }
            } else {
                for (DbExport dbExport : dbResolver.getDbExports(model, prop.getDbTable())) {
                    if (dbExport.getPkColumn() != null && dbExport.getPkColumn().equals(exp.getDbColumn())) {
                        String proposal = getValueConverter().toString(dbExport.getFkTable(), "IDENT");
                        ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                        acceptor.accept(completionProposal);
                    }
                }
            }
        }
    }

    @Override
    public void completeExportAssignement_FkColumn(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof ExportAssignement)) {
            super.completeExportAssignement_FkColumn(model, assignment, context, acceptor);
            return;
        }
        ExportAssignement exp = (ExportAssignement) model;
        PojogenProperty prop = EcoreUtil2.getContainerOfType(exp, PojogenProperty.class);
        if (prop.getDbTable() != null && exp.getDbColumn() != null & exp.getFkTable() != null) {
            // System.out.println("FKCOLUMN for " + prop.getDbTable() + " and " + exp.getDbColumn() + " and "
            // + exp.getFkTable());
            if ("create-one-to-many".equals(prop.getName())) {
                for (String column : dbResolver.getColumns(model, exp.getFkTable())) {
                    String proposal = getValueConverter().toString(column, "IDENT");
                    ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                    acceptor.accept(completionProposal);
                }
            } else {
                for (DbExport dbExport : dbResolver.getDbExports(model, prop.getDbTable())) {
                    if (dbExport.getPkColumn() != null && dbExport.getPkColumn().equals(exp.getDbColumn())) {
                        if (dbExport.getFkTable() != null && dbExport.getFkTable().equals(exp.getFkTable())) {
                            String proposal = getValueConverter().toString(dbExport.getFkColumn(), "IDENT");
                            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                            acceptor.accept(completionProposal);
                        }
                    }
                }
            }
        }
    }

    @Override
    public void completeExportAssignement_DbColumn(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof PojogenProperty)) {
            super.completeExportAssignement_DbColumn(model, assignment, context, acceptor);
            return;
        }
        PojogenProperty prop = (PojogenProperty) model;
        if (prop.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completeManyToManyAssignement_PkColumn(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof PojogenProperty)) {
            super.completeManyToManyAssignement_PkColumn(model, assignment, context, acceptor);
            return;
        }
        PojogenProperty prop = (PojogenProperty) model;
        if (prop.getDbTable() != null) {
            for (DbImport dbImport : dbResolver.getDbImports(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(dbImport.getPkColumn(), "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completeManyToManyAssignement_PkTable(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof ManyToManyAssignement)) {
            super.completeManyToManyAssignement_PkTable(model, assignment, context, acceptor);
            return;
        }
        ManyToManyAssignement many2 = (ManyToManyAssignement) model;
        PojogenProperty prop = EcoreUtil2.getContainerOfType(many2, PojogenProperty.class);
        if (prop.getDbTable() != null && many2.getPkColumn() != null) {
            for (DbImport dbImport : dbResolver.getDbImports(model, prop.getDbTable())) {
                if (dbImport.getPkColumn() != null && dbImport.getPkColumn().equals(many2.getPkColumn())) {
                    String proposal = getValueConverter().toString(dbImport.getPkTable(), "IDENT");
                    ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                    acceptor.accept(completionProposal);
                }
            }
        }
    }

    @Override
    public void completeInheritanceAssignement_DbColumns(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof InheritanceAssignement)) {
            super.completeInheritanceAssignement_DbColumns(model, assignment, context, acceptor);
            return;
        }
        // InheritanceAssignement prop = (InheritanceAssignement) model;
        PojogenProperty pojogenProperty = EcoreUtil2.getContainerOfType(model, PojogenProperty.class);
        if (pojogenProperty.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, pojogenProperty.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                acceptor.accept(completionProposal);
            }
        }
    }

    private static final String[] methods = { "toString", "hashCode", "equals", "isDef", "toInit", "enumDef",
            "enumInit", "index=" };

    @Override
    public void completePojogenProperty_Methods(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!(model instanceof PojogenProperty)) {
            super.completePojogenProperty_Methods(model, assignment, context, acceptor);
            return;
        }
        // PojogenProperty prop = (PojogenProperty) model;
        for (String method : methods) {
            String proposal = getValueConverter().toString(method, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeShowColumnTypeAssignement_DbColumn(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof PojogenProperty)) {
            super.completeShowColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
            return;
        }
        PojogenProperty prop = (PojogenProperty) model;
        if (prop.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completeShowColumnTypeAssignement_Type(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof ShowColumnTypeAssignement)) {
            super.completeShowColumnTypeAssignement_Type(model, assignment, context, acceptor);
            return;
        }
        ShowColumnTypeAssignement prop = (ShowColumnTypeAssignement) model;
        PojogenProperty pojogenProperty = EcoreUtil2.getContainerOfType(model, PojogenProperty.class);
        String table = pojogenProperty.getDbTable();
        String column = prop.getDbColumn();
        String type = dbResolver.getType(model, table, column);
        String proposal = getValueConverter().toString(type, "PropertyValue");
        ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
        acceptor.accept(completionProposal);
    }

    @Override
    public void completeJoinTableAssignement_DbTable(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeJoinTableAssignement_DbTable(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getTables(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeJoinTableAssignement_DbTables(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeJoinTableAssignement_DbTables(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getTables(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void complete_StatementModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        Artifacts artifacts = null;
        MetaStatement metaStatement = EcoreUtil2.getContainerOfType(model, MetaStatement.class);
        artifacts = EcoreUtil2.getContainerOfType(metaStatement, Artifacts.class);
        Set<PojoEntity> entities = listEntities(artifacts.eResource().getResourceSet(),
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__POJO_PACKAGES));
        for (PojoEntity entity : entities) {
            String proposal = getValueConverter().toString(entity.getName(), "IDENT");
            ICompletionProposal completionProposal2 = createCompletionProposal(
                    CONSTANT_USAGE_EXTENDED + "=" + proposal, context);
            acceptor.accept(completionProposal2);
            ICompletionProposal completionProposal = createCompletionProposal(IDENTIFIER_USAGE_EXTENDED + "="
                    + proposal, context);
            acceptor.accept(completionProposal);
            ICompletionProposal completionProposal3 = createCompletionProposal(COLUMN_USAGE_EXTENDED + "=" + proposal,
                    context);
            acceptor.accept(completionProposal3);
        }
        Set<PojoDefinition> pojos = listPojos(artifacts.eResource().getResourceSet(),
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__POJOS));
        for (PojoDefinition pojo : pojos) {
            String proposal = getValueConverter().toString(pojo.getName(), "IDENT");
            ICompletionProposal completionProposal2 = createCompletionProposal(CONSTANT_USAGE + "=" + proposal, context);
            acceptor.accept(completionProposal2);
            ICompletionProposal completionProposal = createCompletionProposal(IDENTIFIER_USAGE + "=" + proposal,
                    context);
            acceptor.accept(completionProposal);
            ICompletionProposal completionProposal3 = createCompletionProposal(COLUMN_USAGE + "=" + proposal, context);
            acceptor.accept(completionProposal3);
        }
        Set<TableDefinition> tables = listTables(artifacts.eResource().getResourceSet(),
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__TABLES));
        for (TableDefinition table : tables) {
            String proposal = getValueConverter().toString(table.getName(), "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(TABLE_USAGE + "=" + proposal, context);
            acceptor.accept(completionProposal);
        }
        // super.complete_StatementModifier(model, ruleCall, context, acceptor);
    }

    @Override
    public void complete_MappingRuleModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        Artifacts artifacts = null;
        MappingRule mappingRule = EcoreUtil2.getContainerOfType(model, MappingRule.class);
        artifacts = EcoreUtil2.getContainerOfType(mappingRule, Artifacts.class);
        Set<PojoEntity> entities = listEntities(artifacts.eResource().getResourceSet(),
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__POJO_PACKAGES));
        for (PojoEntity entity : entities) {
            String proposal = getValueConverter().toString(entity.getName(), "IDENT");
            ICompletionProposal completionProposal2 = createCompletionProposal(MAPPING_USAGE_EXTENDED + "=" + proposal,
                    context);
            acceptor.accept(completionProposal2);
        }
        Set<PojoDefinition> pojos = listPojos(artifacts.eResource().getResourceSet(),
                getScopeProvider().getScope(artifacts, ProcessorDslPackage.Literals.ARTIFACTS__POJOS));
        for (PojoDefinition pojo : pojos) {
            String proposal = getValueConverter().toString(pojo.getName(), "IDENT");
            ICompletionProposal completionProposal2 = createCompletionProposal(MAPPING_USAGE + "=" + proposal, context);
            acceptor.accept(completionProposal2);
        }
        // super.complete_MappingRuleModifier(model, ruleCall, context, acceptor);
    }

    public void complete_Modifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        addProposalList(TYPES, "IDENT", context, acceptor, "type=");
        addProposalList(MODIFIERS, "IDENT", context, acceptor, null);
    }

    public void complete_MappingItemModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        addProposalList(TYPES, "IDENT", context, acceptor, "type=");
        addProposalList(MODIFIERS, "IDENT", context, acceptor, null);
    }

    protected Set<PojoEntity> listEntities(ResourceSet resourceSet, IScope scope) {
        Set<PojoEntity> result = new TreeSet<PojoEntity>(new Comparator<PojoEntity>() {

            @Override
            public int compare(PojoEntity o1, PojoEntity o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });
        Iterable<IEObjectDescription> iterable = scope.getAllElements();
        for (Iterator<IEObjectDescription> iter = iterable.iterator(); iter.hasNext();) {
            IEObjectDescription description = iter.next();
            PackageDeclaration packageDeclaration = (PackageDeclaration) resourceSet.getEObject(
                    description.getEObjectURI(), true);
            for (AbstractPojoEntity aEntity : packageDeclaration.getElements()) {
                if (aEntity instanceof PojoEntity) {
                    result.add((PojoEntity) aEntity);
                }
            }
        }
        return result;
    }

    protected Set<PojoDefinition> listPojos(ResourceSet resourceSet, IScope scope) {
        Set<PojoDefinition> result = new TreeSet<PojoDefinition>(new Comparator<PojoDefinition>() {

            @Override
            public int compare(PojoDefinition o1, PojoDefinition o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });
        Iterable<IEObjectDescription> iterable = scope.getAllElements();
        for (Iterator<IEObjectDescription> iter = iterable.iterator(); iter.hasNext();) {
            IEObjectDescription description = iter.next();
            PojoDefinition pojo = (PojoDefinition) resourceSet.getEObject(description.getEObjectURI(), true);
            result.add(pojo);
        }
        return result;
    }

    protected Set<TableDefinition> listTables(ResourceSet resourceSet, IScope scope) {
        Set<TableDefinition> result = new TreeSet<TableDefinition>(new Comparator<TableDefinition>() {

            @Override
            public int compare(TableDefinition o1, TableDefinition o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });
        Iterable<IEObjectDescription> iterable = scope.getAllElements();
        for (Iterator<IEObjectDescription> iter = iterable.iterator(); iter.hasNext();) {
            IEObjectDescription description = iter.next();
            TableDefinition table = (TableDefinition) resourceSet.getEObject(description.getEObjectURI(), true);
            result.add(table);
        }
        return result;
    }

    @Override
    public void completeMetagenProperty_DbTable(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeMetagenProperty_DbTable(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getTables(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeMetagenProperty_DbFunction(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeMetagenProperty_DbFunction(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getFunctions(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeMetagenProperty_DbProcedure(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeMetagenProperty_DbProcedure(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getProcedures(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeMetagenProperty_Sequence(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeMetagenProperty_Sequence(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getSequences(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeMetaTypeAssignement_DbColumn(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof MetagenProperty)) {
            super.completeMetaTypeAssignement_DbColumn(model, assignment, context, acceptor);
            return;
        }
        MetagenProperty prop = (MetagenProperty) model;
        if (prop.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completeDaogenProperty_DbTables(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeDaogenProperty_DbTables(model, assignment, context, acceptor);
            return;
        }
        for (String table : dbResolver.getTables(model)) {
            if (table.indexOf('$') >= 0)
                continue;
            String proposal = getValueConverter().toString(table, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeMetagenProperty_DbColumns(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof MetagenProperty)) {
            super.completeMetagenProperty_DbColumns(model, assignment, context, acceptor);
            return;
        }
        MetagenProperty prop = (MetagenProperty) model;
        if (prop.getDbTable() != null) {
            for (String column : dbResolver.getColumns(model, prop.getDbTable())) {
                String proposal = getValueConverter().toString(column, "IDENT");
                ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                acceptor.accept(completionProposal);
            }
        }
    }

    @Override
    public void completeDatabaseMetaInfoAssignement_DbMetaInfo(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeDatabaseMetaInfoAssignement_DbMetaInfo(model, assignment, context, acceptor);
            return;
        }
        String dbMetaInfo = dbResolver.getDbMetaInfo(model);
        String proposal = getValueConverter().toString(dbMetaInfo, "PropertyValue");
        ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
        acceptor.accept(completionProposal);
    }

    @Override
    public void completeDriverMetaInfoAssignement_DbDriverInfo(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeDriverMetaInfoAssignement_DbDriverInfo(model, assignment, context, acceptor);
            return;
        }
        String dbDriverInfo = dbResolver.getDbDriverInfo(model);
        String proposal = getValueConverter().toString(dbDriverInfo, "PropertyValue");
        ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
        acceptor.accept(completionProposal);
    }

    @Override
    public void completeDriverMethodOutputAssignement_DriverMethod(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof DatabaseProperty)) {
            super.completeDriverMethodOutputAssignement_DriverMethod(model, assignment, context, acceptor);
            return;
        }
        for (String driverMetod : dbResolver.getDriverMethods(model)) {
            String proposal = getValueConverter().toString(driverMetod, "PropertyValue");
            ICompletionProposal completionProposal = createCompletionProposal(proposal + "->", context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeDriverMethodOutputAssignement_CallOutput(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model) && !(model instanceof DriverMethodOutputAssignement)) {
            super.completeDriverMethodOutputAssignement_CallOutput(model, assignment, context, acceptor);
            return;
        }
        DriverMethodOutputAssignement prop = (DriverMethodOutputAssignement) model;
        String methodName = prop.getDriverMethod();
        Object methodCallOutput = dbResolver.getDriverMethodOutput(model, methodName);
        if (methodCallOutput == null)
            methodCallOutput = "null";
        String proposal = getValueConverter().toString("" + methodCallOutput, "PropertyValue");
        ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
        acceptor.accept(completionProposal);
    }

    @Override
    public void completeDatabaseTypeAssignement_DbType(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeDatabaseTypeAssignement_DbType(model, assignment, context, acceptor);
            return;
        }
        String dbMetaInfo = dbResolver.getDbMetaInfo(model);
        DbType[] dbTypes = DbType.fromDbMetaInfo(dbMetaInfo);
        for (DbType dbType : dbTypes) {
            String proposal = getValueConverter().toString(dbType.getValue(), "PropertyValue");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeDatabaseCatalogAssignement_DbCatalog(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeDatabaseCatalogAssignement_DbCatalog(model, assignment, context, acceptor);
            return;
        }
        for (String catalog : dbResolver.getCatalogs(model)) {
            String proposal = getValueConverter().toString(catalog, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeDatabaseSchemaAssignement_DbSchema(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (!isResolveDb(model)) {
            super.completeDatabaseSchemaAssignement_DbSchema(model, assignment, context, acceptor);
            return;
        }
        for (String schema : dbResolver.getSchemas(model)) {
            String proposal = getValueConverter().toString(schema, "IDENT");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    }

    @Override
    public void completeDebugLevelAssignement_Debug(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        addProposalList(DEBUG_LEVELS, "DEBUG_LEVELS", context, acceptor, null);
    }
}
