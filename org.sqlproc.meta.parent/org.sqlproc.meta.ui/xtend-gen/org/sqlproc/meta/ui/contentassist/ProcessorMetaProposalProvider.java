/**
 * generated by Xtext
 */
package org.sqlproc.meta.ui.contentassist;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmEnumerationLiteral;
import org.eclipse.xtext.common.types.JvmEnumerationType;
import org.eclipse.xtext.common.types.JvmFeature;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.sqlproc.meta.processorMeta.Artifacts;
import org.sqlproc.meta.processorMeta.Column;
import org.sqlproc.meta.processorMeta.DatabaseProperty;
import org.sqlproc.meta.processorMeta.DriverMethodOutputAssignement;
import org.sqlproc.meta.processorMeta.ExportAssignement;
import org.sqlproc.meta.processorMeta.ExtendedColumn;
import org.sqlproc.meta.processorMeta.ExtendedColumnName;
import org.sqlproc.meta.processorMeta.ExtendedMappingItem;
import org.sqlproc.meta.processorMeta.ImportAssignement;
import org.sqlproc.meta.processorMeta.InheritanceAssignement;
import org.sqlproc.meta.processorMeta.ManyToManyAssignement;
import org.sqlproc.meta.processorMeta.MappingColumn;
import org.sqlproc.meta.processorMeta.MappingColumnName;
import org.sqlproc.meta.processorMeta.MappingRule;
import org.sqlproc.meta.processorMeta.MetaStatement;
import org.sqlproc.meta.processorMeta.MetagenProperty;
import org.sqlproc.meta.processorMeta.PojoDefinitionModel;
import org.sqlproc.meta.processorMeta.PojogenProperty;
import org.sqlproc.meta.processorMeta.ProcessorMetaPackage;
import org.sqlproc.meta.processorMeta.ShowColumnTypeAssignement;
import org.sqlproc.meta.processorMeta.TableDefinitionModel;
import org.sqlproc.meta.ui.contentassist.AbstractProcessorMetaProposalProvider;
import org.sqlproc.meta.util.Utils;
import org.sqlproc.plugin.lib.property.ModelProperty;
import org.sqlproc.plugin.lib.property.PojoDefinition;
import org.sqlproc.plugin.lib.property.TableDefinition;
import org.sqlproc.plugin.lib.resolver.DbExport;
import org.sqlproc.plugin.lib.resolver.DbImport;
import org.sqlproc.plugin.lib.resolver.DbResolver;
import org.sqlproc.plugin.lib.resolver.PojoResolver;
import org.sqlproc.plugin.lib.util.Constants;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class ProcessorMetaProposalProvider extends AbstractProcessorMetaProposalProvider {
  public static class Founder {
    private boolean found = false;
  }
  
  @Inject
  private PojoResolver pojoResolver;
  
  @Inject
  private DbResolver dbResolver;
  
  @Inject
  private ModelProperty modelProperty;
  
  private final ArrayList<String> STATEMENT_TYPE = CollectionLiterals.<String>newArrayList("QRY", "CRUD", "CALL");
  
  private final ArrayList<String> MAPPING_TYPE = CollectionLiterals.<String>newArrayList("OUT");
  
  private final ArrayList<String> OPTION_TYPE = CollectionLiterals.<String>newArrayList("OPT", "LOPT", "IOPT", "SOPT", "BOPT", "MOPT");
  
  private final ArrayList<String> TYPES = CollectionLiterals.<String>newArrayList("int", "integer", "long", "byte", "short", 
    "float", "double", "character", "char", "string", "str", "time", "date", "datetime", "timestamp", "stamp", 
    "bool", "boolean", "bigint", "biginteger", "bigdec", "bigdecimal", "bytearr", "bytearray", "bytes", "text", 
    "blob", "clob", "einteger", "eint", "enumstring", "estring", "fromdate", "todate", "cursor", "other");
  
  private final ArrayList<String> MODIFIERS = CollectionLiterals.<String>newArrayList("any", "null", "notnull", "seq", "seq=", 
    "idsel", "idsel=", "id", "isDef=", "isCall=", "dtype=", "gtype=", "discr");
  
  private final ArrayList<String> F_TYPES = CollectionLiterals.<String>newArrayList("set", "update", "values", "where");
  
  private final ArrayList<String> DEBUG_LEVELS = CollectionLiterals.<String>newArrayList("DEBUG", "INFO", "FATAL", "ERROR", "WARN", "TRACE");
  
  @Override
  public void completeMetaStatement_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.addProposalList(this.STATEMENT_TYPE, "STATEMENT_TYPE", context, acceptor, null);
  }
  
  @Override
  public void completeMappingRule_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.addProposalList(this.MAPPING_TYPE, "MAPPING_TYPE", context, acceptor, null);
  }
  
  @Override
  public void completeOptionalFeature_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.addProposalList(this.OPTION_TYPE, "OPTION_TYPE", context, acceptor, null);
  }
  
  public void addProposalList(final List<String> values, final String lexerRule, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String prefix) {
    if (values!=null) {
      final Consumer<String> _function = new Consumer<String>() {
        @Override
        public void accept(final String value) {
          IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
          String _elvis = null;
          if (prefix != null) {
            _elvis = prefix;
          } else {
            _elvis = "";
          }
          String _plus = (_elvis + value);
          final String proposal = _valueConverter.toString(_plus, lexerRule);
          ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
          acceptor.accept(_createCompletionProposal);
        }
      };
      values.forEach(_function);
    }
  }
  
  @Override
  public void completeMetaSql_Ftype(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.addProposalList(this.F_TYPES, "IDENT", context, acceptor, null);
  }
  
  @Override
  public void completeExtendedColumnName_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final Column column = EcoreUtil2.<Column>getContainerOfType(model, Column.class);
    final StringBuilder partialName = new StringBuilder("");
    EList<ExtendedColumn> _columns = null;
    if (column!=null) {
      _columns=column.getColumns();
    }
    if (_columns!=null) {
      final Function1<ExtendedColumn, Boolean> _function = new Function1<ExtendedColumn, Boolean>() {
        @Override
        public Boolean apply(final ExtendedColumn it) {
          boolean _xblockexpression = false;
          {
            ExtendedColumnName _col = it.getCol();
            String _name = _col.getName();
            ProcessorMetaProposalProvider.this.append(partialName, _name);
            _xblockexpression = ((!Objects.equal(context.getPreviousModel(), null)) && (it == context.getPreviousModel()));
          }
          return Boolean.valueOf(_xblockexpression);
        }
      };
      IterableExtensions.<ExtendedColumn>findFirst(_columns, _function);
    }
    String _prefix = context.getPrefix();
    StringBuilder _append = this.append(partialName, _prefix);
    final String prefix = _append.toString();
    boolean _completeUsage = this.completeUsage(model, assignment, context, acceptor, Constants.COLUMN_USAGE, Constants.COLUMN_USAGE_EXTENDED, prefix, true);
    boolean _not = (!_completeUsage);
    if (_not) {
      super.completeExtendedColumnName_Name(model, assignment, context, acceptor);
    }
  }
  
  @Override
  public void completeConstant_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    String _prefix = context.getPrefix();
    boolean _completeUsage = this.completeUsage(model, assignment, context, acceptor, Constants.CONSTANT_USAGE, Constants.CONSTANT_USAGE_EXTENDED, _prefix, false);
    boolean _not = (!_completeUsage);
    if (_not) {
      super.completeConstant_Name(model, assignment, context, acceptor);
    }
  }
  
  @Override
  public void completeIdentifier_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    String _prefix = context.getPrefix();
    boolean _completeUsage = this.completeUsage(model, assignment, context, acceptor, Constants.IDENTIFIER_USAGE, Constants.IDENTIFIER_USAGE_EXTENDED, _prefix, 
      false);
    boolean _not = (!_completeUsage);
    if (_not) {
      super.completeIdentifier_Name(model, assignment, context, acceptor);
    }
  }
  
  public boolean completeUsage(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String usageInFilter, final String usageInFilterExt, final String _prefix, final boolean cutPrefix) {
    boolean _isResolvePojo = this.isResolvePojo(model);
    boolean _not = (!_isResolvePojo);
    if (_not) {
      return false;
    }
    final MetaStatement metaStatement = EcoreUtil2.<MetaStatement>getContainerOfType(model, MetaStatement.class);
    final Artifacts artifacts = EcoreUtil2.<Artifacts>getContainerOfType(model, Artifacts.class);
    final String pojoName = Utils.getTokenFromModifier(metaStatement, usageInFilter);
    PojoDefinition _xifexpression = null;
    boolean _notEquals = (!Objects.equal(pojoName, null));
    if (_notEquals) {
      Map<String, PojoDefinition> _modelPojos = this.modelProperty.getModelPojos(artifacts);
      _xifexpression = _modelPojos.get(pojoName);
    }
    final PojoDefinition pojoDefinition = _xifexpression;
    boolean _equals = Objects.equal(pojoDefinition, null);
    if (_equals) {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(("Error: I can\'t load pojo for " + model), "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
      return true;
    }
    final int pos = _prefix.lastIndexOf(".");
    String _xifexpression_1 = null;
    if ((pos > 0)) {
      _xifexpression_1 = _prefix.substring(0, (pos + 1));
    } else {
      _xifexpression_1 = "";
    }
    final String prefix = _xifexpression_1;
    boolean _isOldPojoValidator = this.modelProperty.isOldPojoValidator(model);
    final boolean newPojoValidator = (!_isOldPojoValidator);
    if ((newPojoValidator && (pojoDefinition.getClassx() instanceof JvmDeclaredType))) {
      JvmType _classx = pojoDefinition.getClassx();
      final JvmDeclaredType type = ((JvmDeclaredType) _classx);
      Iterable<JvmFeature> _allFeatures = this.getAllFeatures(type, _prefix);
      final Consumer<JvmFeature> _function = new Consumer<JvmFeature>() {
        @Override
        public void accept(final JvmFeature feature) {
          IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
          String _simpleName = feature.getSimpleName();
          final String proposal = _valueConverter.toString(_simpleName, "IDENT");
          InputOutput.<String>println(proposal);
          ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal((prefix + proposal), context);
          acceptor.accept(_createCompletionProposal);
        }
      };
      _allFeatures.forEach(_function);
    } else {
      Resource _eResource = model.eResource();
      URI _uRI = null;
      if (_eResource!=null) {
        _uRI=_eResource.getURI();
      }
      final URI uri = _uRI;
      String _qualifiedName = pojoDefinition.getQualifiedName();
      final String clazz = this.getClassName(_qualifiedName, prefix, uri);
      boolean _equals_1 = Objects.equal(clazz, null);
      if (_equals_1) {
        return false;
      }
      final PropertyDescriptor[] descriptors = this.pojoResolver.getPropertyDescriptors(clazz, uri);
      boolean _equals_2 = Objects.equal(descriptors, null);
      if (_equals_2) {
        return false;
      }
      final Function1<PropertyDescriptor, Boolean> _function_1 = new Function1<PropertyDescriptor, Boolean>() {
        @Override
        public Boolean apply(final PropertyDescriptor it) {
          String _name = it.getName();
          return Boolean.valueOf((!Objects.equal("class", _name)));
        }
      };
      Iterable<PropertyDescriptor> _filter = IterableExtensions.<PropertyDescriptor>filter(((Iterable<PropertyDescriptor>)Conversions.doWrapArray(descriptors)), _function_1);
      final Consumer<PropertyDescriptor> _function_2 = new Consumer<PropertyDescriptor>() {
        @Override
        public void accept(final PropertyDescriptor descriptor) {
          IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
          String _name = descriptor.getName();
          final String proposal = _valueConverter.toString(_name, "IDENT");
          String _xifexpression = null;
          if (cutPrefix) {
            _xifexpression = proposal;
          } else {
            _xifexpression = (prefix + proposal);
          }
          ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(_xifexpression, context);
          acceptor.accept(_createCompletionProposal);
        }
      };
      _filter.forEach(_function_2);
    }
    return true;
  }
  
  public Iterable<JvmFeature> getAllFeatures(final JvmDeclaredType _type, final String _prefix) {
    Iterable<JvmFeature> _xblockexpression = null;
    {
      JvmDeclaredType type = _type;
      final int pos = _prefix.lastIndexOf(".");
      if ((pos > 0)) {
        String _substring = _prefix.substring(0, pos);
        final Iterable<JvmFeature> features = type.findAllFeaturesByName(_substring);
        if ((((!Objects.equal(features, null)) && (!IterableExtensions.isEmpty(features))) && (IterableExtensions.<JvmFeature>head(features) instanceof JvmField))) {
          JvmFeature _head = IterableExtensions.<JvmFeature>head(features);
          JvmField field = ((JvmField) _head);
          JvmTypeReference _type_1 = field.getType();
          if ((_type_1 instanceof JvmParameterizedTypeReference)) {
            JvmTypeReference _type_2 = field.getType();
            final JvmType jvmType = ((JvmParameterizedTypeReference) _type_2).getType();
            if ((jvmType instanceof JvmDeclaredType)) {
              type = ((JvmDeclaredType) jvmType);
            }
          }
        }
      }
      Iterable<JvmFeature> _allFeatures = type.getAllFeatures();
      final Function1<JvmFeature, Boolean> _function = new Function1<JvmFeature, Boolean>() {
        @Override
        public Boolean apply(final JvmFeature it) {
          return Boolean.valueOf((it instanceof JvmField));
        }
      };
      Iterable<JvmFeature> _filter = IterableExtensions.<JvmFeature>filter(_allFeatures, _function);
      final Function1<JvmFeature, Boolean> _function_1 = new Function1<JvmFeature, Boolean>() {
        @Override
        public Boolean apply(final JvmFeature it) {
          boolean _isStatic = it.isStatic();
          return Boolean.valueOf((!_isStatic));
        }
      };
      Iterable<JvmFeature> _filter_1 = IterableExtensions.<JvmFeature>filter(_filter, _function_1);
      final Function1<JvmFeature, Boolean> _function_2 = new Function1<JvmFeature, Boolean>() {
        @Override
        public Boolean apply(final JvmFeature it) {
          String _simpleName = it.getSimpleName();
          boolean _startsWith = _simpleName.startsWith("_");
          return Boolean.valueOf((!_startsWith));
        }
      };
      _xblockexpression = IterableExtensions.<JvmFeature>filter(_filter_1, _function_2);
    }
    return _xblockexpression;
  }
  
  @Override
  public void completeMappingColumnName_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolvePojo = this.isResolvePojo(model);
    boolean _not = (!_isResolvePojo);
    if (_not) {
      super.completeMappingColumnName_Name(model, assignment, context, acceptor);
      return;
    }
    final MappingColumn mappingColumn = EcoreUtil2.<MappingColumn>getContainerOfType(model, MappingColumn.class);
    final MappingRule mappingRule = EcoreUtil2.<MappingRule>getContainerOfType(model, MappingRule.class);
    final Artifacts artifacts = EcoreUtil2.<Artifacts>getContainerOfType(model, Artifacts.class);
    final String pojoName = Utils.getTokenFromModifier(mappingRule, Constants.MAPPING_USAGE);
    PojoDefinition _xifexpression = null;
    boolean _notEquals = (!Objects.equal(pojoName, null));
    if (_notEquals) {
      Map<String, PojoDefinition> _modelPojos = this.modelProperty.getModelPojos(artifacts);
      _xifexpression = _modelPojos.get(pojoName);
    }
    final PojoDefinition pojoDefinition = _xifexpression;
    boolean _equals = Objects.equal(pojoDefinition, null);
    if (_equals) {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(("Error: I can\'t load pojo for " + model), "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    }
    final StringBuilder partialName = new StringBuilder("");
    boolean cutPrefix = false;
    if (((model instanceof MappingColumn) && (!Objects.equal(mappingColumn, null)))) {
      cutPrefix = true;
      EList<ExtendedMappingItem> _items = mappingColumn.getItems();
      final Function1<ExtendedMappingItem, Boolean> _function = new Function1<ExtendedMappingItem, Boolean>() {
        @Override
        public Boolean apply(final ExtendedMappingItem it) {
          boolean _xblockexpression = false;
          {
            MappingColumnName _attr = it.getAttr();
            String _name = _attr.getName();
            ProcessorMetaProposalProvider.this.append(partialName, _name);
            _xblockexpression = ((!Objects.equal(context.getPreviousModel(), null)) && (it == context.getPreviousModel()));
          }
          return Boolean.valueOf(_xblockexpression);
        }
      };
      IterableExtensions.<ExtendedMappingItem>findFirst(_items, _function);
    }
    String _prefix = context.getPrefix();
    StringBuilder _append = this.append(partialName, _prefix);
    String prefix = _append.toString();
    final int pos = prefix.lastIndexOf(".");
    String _xifexpression_1 = null;
    if ((pos > 0)) {
      _xifexpression_1 = prefix.substring(0, (pos + 1));
    } else {
      _xifexpression_1 = "";
    }
    final String _prefix_1 = _xifexpression_1;
    final boolean _cutPrefix = cutPrefix;
    boolean _isOldPojoValidator = this.modelProperty.isOldPojoValidator(model);
    final boolean newPojoValidator = (!_isOldPojoValidator);
    if ((newPojoValidator && (pojoDefinition.getClassx() instanceof JvmDeclaredType))) {
      JvmType _classx = pojoDefinition.getClassx();
      final JvmDeclaredType type = ((JvmDeclaredType) _classx);
      Iterable<JvmFeature> _allFeatures = this.getAllFeatures(type, _prefix_1);
      final Consumer<JvmFeature> _function_1 = new Consumer<JvmFeature>() {
        @Override
        public void accept(final JvmFeature feature) {
          IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
          String _simpleName = feature.getSimpleName();
          final String proposal = _valueConverter.toString(_simpleName, "IDENT");
          InputOutput.<String>println(proposal);
          ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal((_prefix_1 + proposal), context);
          acceptor.accept(_createCompletionProposal);
        }
      };
      _allFeatures.forEach(_function_1);
    } else {
      Resource _eResource = model.eResource();
      URI _uRI = null;
      if (_eResource!=null) {
        _uRI=_eResource.getURI();
      }
      final URI uri = _uRI;
      String _qualifiedName = pojoDefinition.getQualifiedName();
      final String clazz = this.getClassName(_qualifiedName, prefix, uri);
      boolean _equals_1 = Objects.equal(clazz, null);
      if (_equals_1) {
        return;
      }
      final PropertyDescriptor[] descriptors = this.pojoResolver.getPropertyDescriptors(clazz, uri);
      boolean _equals_2 = Objects.equal(descriptors, null);
      if (_equals_2) {
        super.completeMappingColumnName_Name(model, assignment, context, acceptor);
      } else {
        final Function1<PropertyDescriptor, Boolean> _function_2 = new Function1<PropertyDescriptor, Boolean>() {
          @Override
          public Boolean apply(final PropertyDescriptor it) {
            String _name = it.getName();
            return Boolean.valueOf((!Objects.equal("class", _name)));
          }
        };
        Iterable<PropertyDescriptor> _filter = IterableExtensions.<PropertyDescriptor>filter(((Iterable<PropertyDescriptor>)Conversions.doWrapArray(descriptors)), _function_2);
        final Consumer<PropertyDescriptor> _function_3 = new Consumer<PropertyDescriptor>() {
          @Override
          public void accept(final PropertyDescriptor descriptor) {
            IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
            String _name = descriptor.getName();
            final String proposal = _valueConverter.toString(_name, "IDENT");
            String _xifexpression = null;
            if (_cutPrefix) {
              _xifexpression = proposal;
            } else {
              _xifexpression = (_prefix_1 + proposal);
            }
            ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(_xifexpression, context);
            acceptor.accept(_createCompletionProposal);
          }
        };
        _filter.forEach(_function_3);
      }
    }
  }
  
  public StringBuilder append(final StringBuilder sb, final String s) {
    StringBuilder _xblockexpression = null;
    {
      int _length = sb.length();
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        sb.append(".");
      }
      _xblockexpression = sb.append(s);
    }
    return _xblockexpression;
  }
  
  public boolean isResolvePojo(final EObject model) {
    return this.modelProperty.isDoResolvePojo(model);
  }
  
  public boolean isResolveDb(final EObject model) {
    return this.dbResolver.isResolveDb(model);
  }
  
  public boolean isPrimitive(final Class<?> clazz) {
    boolean _equals = Objects.equal(clazz, null);
    if (_equals) {
      return true;
    }
    boolean _equals_1 = Objects.equal(clazz, String.class);
    if (_equals_1) {
      return true;
    }
    boolean _equals_2 = Objects.equal(clazz, Date.class);
    if (_equals_2) {
      return true;
    }
    boolean _equals_3 = Objects.equal(clazz, java.sql.Date.class);
    if (_equals_3) {
      return true;
    }
    boolean _equals_4 = Objects.equal(clazz, Time.class);
    if (_equals_4) {
      return true;
    }
    boolean _equals_5 = Objects.equal(clazz, Timestamp.class);
    if (_equals_5) {
      return true;
    }
    boolean _equals_6 = Objects.equal(clazz, Blob.class);
    if (_equals_6) {
      return true;
    }
    boolean _equals_7 = Objects.equal(clazz, Clob.class);
    if (_equals_7) {
      return true;
    }
    boolean _equals_8 = Objects.equal(clazz, BigDecimal.class);
    if (_equals_8) {
      return true;
    }
    boolean _equals_9 = Objects.equal(clazz, BigInteger.class);
    if (_equals_9) {
      return true;
    }
    return false;
  }
  
  public String getClassName(final String baseClass, final String property, final URI uri) {
    if ((Objects.equal(baseClass, null) || Objects.equal(property, null))) {
      return baseClass;
    }
    int pos1 = property.indexOf(".");
    if ((pos1 == (-1))) {
      return baseClass;
    }
    String checkProperty = property;
    int _indexOf = checkProperty.indexOf("=");
    pos1 = _indexOf;
    if ((pos1 > 0)) {
      int pos2 = checkProperty.indexOf(".", pos1);
      if ((pos2 > pos1)) {
        String _substring = checkProperty.substring(0, pos1);
        String _substring_1 = checkProperty.substring(pos2);
        String _plus = (_substring + _substring_1);
        checkProperty = _plus;
      }
    }
    String innerProperty = ((String) null);
    int _indexOf_1 = checkProperty.indexOf(".");
    pos1 = _indexOf_1;
    if ((pos1 > 0)) {
      String _substring_2 = checkProperty.substring((pos1 + 1));
      innerProperty = _substring_2;
      String _substring_3 = checkProperty.substring(0, pos1);
      checkProperty = _substring_3;
    }
    PropertyDescriptor[] descriptors = this.pojoResolver.getPropertyDescriptors(baseClass, uri);
    boolean _equals = Objects.equal(descriptors, null);
    if (_equals) {
      return null;
    }
    final String _checkProperty = checkProperty;
    final PropertyDescriptor[] _converted_descriptors = (PropertyDescriptor[])descriptors;
    final Function1<PropertyDescriptor, Boolean> _function = new Function1<PropertyDescriptor, Boolean>() {
      @Override
      public Boolean apply(final PropertyDescriptor descriptor) {
        String _name = descriptor.getName();
        return Boolean.valueOf(Objects.equal(_name, _checkProperty));
      }
    };
    PropertyDescriptor innerDesriptor = IterableExtensions.<PropertyDescriptor>findFirst(((Iterable<PropertyDescriptor>)Conversions.doWrapArray(_converted_descriptors)), _function);
    boolean _equals_1 = Objects.equal(innerDesriptor, null);
    if (_equals_1) {
      return null;
    }
    Class<?> innerClass = innerDesriptor.getPropertyType();
    boolean _isArray = innerClass.isArray();
    if (_isArray) {
      Method _readMethod = innerDesriptor.getReadMethod();
      Type _genericReturnType = _readMethod.getGenericReturnType();
      ParameterizedType type = ((ParameterizedType) _genericReturnType);
      if ((Objects.equal(type.getActualTypeArguments(), null) || (type.getActualTypeArguments().length == 0))) {
        return null;
      }
      Type[] _actualTypeArguments = type.getActualTypeArguments();
      Type _head = IterableExtensions.<Type>head(((Iterable<Type>)Conversions.doWrapArray(_actualTypeArguments)));
      innerClass = ((Class<?>) _head);
      boolean _isPrimitive = this.isPrimitive(innerClass);
      if (_isPrimitive) {
        return null;
      }
      String _name = innerClass.getName();
      return this.getClassName(_name, innerProperty, uri);
    } else {
      boolean _isAssignableFrom = Collection.class.isAssignableFrom(innerClass);
      if (_isAssignableFrom) {
        Method _readMethod_1 = innerDesriptor.getReadMethod();
        Type _genericReturnType_1 = _readMethod_1.getGenericReturnType();
        ParameterizedType type_1 = ((ParameterizedType) _genericReturnType_1);
        if ((Objects.equal(type_1.getActualTypeArguments(), null) || (type_1.getActualTypeArguments().length == 0))) {
          return null;
        }
        Type[] _actualTypeArguments_1 = type_1.getActualTypeArguments();
        Type _head_1 = IterableExtensions.<Type>head(((Iterable<Type>)Conversions.doWrapArray(_actualTypeArguments_1)));
        innerClass = ((Class<?>) _head_1);
        boolean _isPrimitive_1 = this.isPrimitive(innerClass);
        if (_isPrimitive_1) {
          return null;
        }
        String _name_1 = innerClass.getName();
        return this.getClassName(_name_1, innerProperty, uri);
      } else {
        boolean _isPrimitive_2 = this.isPrimitive(innerClass);
        if (_isPrimitive_2) {
          return null;
        }
        String _name_2 = innerClass.getName();
        return this.getClassName(_name_2, innerProperty, uri);
      }
    }
  }
  
  public void acceptTables(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String suffix) {
    List<String> _tables = this.dbResolver.getTables(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      @Override
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_tables, _function);
    final Consumer<String> _function_1 = new Consumer<String>() {
      @Override
      public void accept(final String table) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal((proposal + suffix), context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptProcedures(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _procedures = this.dbResolver.getProcedures(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      @Override
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_procedures, _function);
    final Consumer<String> _function_1 = new Consumer<String>() {
      @Override
      public void accept(final String table) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptFunctions(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _functions = this.dbResolver.getFunctions(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      @Override
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_functions, _function);
    final Consumer<String> _function_1 = new Consumer<String>() {
      @Override
      public void accept(final String table) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptCheckConstraints(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _checkConstraints = this.dbResolver.getCheckConstraints(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      @Override
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_checkConstraints, _function);
    final Consumer<String> _function_1 = new Consumer<String>() {
      @Override
      public void accept(final String table) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptSequences(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _sequences = this.dbResolver.getSequences(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      @Override
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_sequences, _function);
    final Consumer<String> _function_1 = new Consumer<String>() {
      @Override
      public void accept(final String table) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    _filter.forEach(_function_1);
  }
  
  public void acceptColumns(final List<String> columns, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String prefix, final String suffix) {
    final Consumer<String> _function = new Consumer<String>() {
      @Override
      public void accept(final String column) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(column, "IDENT");
        String _xifexpression = null;
        boolean _notEquals = (!Objects.equal(prefix, null));
        if (_notEquals) {
          _xifexpression = ((prefix + ".") + proposal);
        } else {
          _xifexpression = proposal;
        }
        String completion = _xifexpression;
        String _xifexpression_1 = null;
        boolean _notEquals_1 = (!Objects.equal(suffix, null));
        if (_notEquals_1) {
          _xifexpression_1 = (completion + suffix);
        } else {
          _xifexpression_1 = completion;
        }
        completion = _xifexpression_1;
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(completion, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    columns.forEach(_function);
  }
  
  @Override
  public void completeTableDefinitionModel_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeTableDefinitionModel_Table(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeProcedureDefinitionModel_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeProcedureDefinitionModel_Table(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  @Override
  public void completeFunctionDefinitionModel_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeFunctionDefinitionModel_Table(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void complete_DatabaseColumn(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.complete_DatabaseColumn(model, ruleCall, context, acceptor);
      return;
    }
    String _prefix = context.getPrefix();
    final int pos = _prefix.indexOf(".");
    String _xifexpression = null;
    if ((pos > 0)) {
      String _prefix_1 = context.getPrefix();
      _xifexpression = _prefix_1.substring(0, pos);
    }
    final String prefix = _xifexpression;
    final MetaStatement metaStatement = EcoreUtil2.<MetaStatement>getContainerOfType(model, MetaStatement.class);
    final Artifacts artifacts = EcoreUtil2.<Artifacts>getContainerOfType(model, Artifacts.class);
    final String value = Utils.getTokenFromModifier(metaStatement, Constants.TABLE_USAGE, prefix);
    TableDefinition _xifexpression_1 = null;
    boolean _notEquals = (!Objects.equal(value, null));
    if (_notEquals) {
      Map<String, TableDefinition> _modelTables = this.modelProperty.getModelTables(artifacts);
      _xifexpression_1 = _modelTables.get(value);
    }
    final TableDefinition tableDefinition = _xifexpression_1;
    if (((!Objects.equal(tableDefinition, null)) && (!Objects.equal(tableDefinition.getTable(), null)))) {
      String _table = tableDefinition.getTable();
      List<String> _columns = this.dbResolver.getColumns(model, _table);
      this.acceptColumns(_columns, context, acceptor, prefix, null);
    }
  }
  
  @Override
  public void complete_DatabaseTable(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.complete_DatabaseTable(model, ruleCall, context, acceptor);
      return;
    }
    final MetaStatement metaStatement = EcoreUtil2.<MetaStatement>getContainerOfType(model, MetaStatement.class);
    final Artifacts artifacts = EcoreUtil2.<Artifacts>getContainerOfType(model, Artifacts.class);
    List<String> _tokensFromModifier = Utils.getTokensFromModifier(metaStatement, Constants.TABLE_USAGE);
    final Consumer<String> _function = new Consumer<String>() {
      @Override
      public void accept(final String value) {
        Map<String, TableDefinition> _modelTables = ProcessorMetaProposalProvider.this.modelProperty.getModelTables(artifacts);
        final TableDefinition tableDefinition = _modelTables.get(value);
        boolean _notEquals = (!Objects.equal(tableDefinition, null));
        if (_notEquals) {
          IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
          String _table = tableDefinition.getTable();
          final String proposal = _valueConverter.toString(_table, "IDENT");
          ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
          acceptor.accept(_createCompletionProposal);
        }
      }
    };
    _tokensFromModifier.forEach(_function);
  }
  
  @Override
  public void completePojogenProperty_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptCheckConstraints(model, context, acceptor);
  }
  
  @Override
  public void completePojogenProperty_DbProcedure(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbProcedure(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  @Override
  public void completePojogenProperty_DbFunction(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbFunction(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeTableAssignement_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeTableAssignement_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "->");
  }
  
  @Override
  public void completeInheritanceAssignement_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeInheritanceAssignement_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "->");
  }
  
  @Override
  public void completePojogenProperty_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completePojogenProperty_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeMetagenProperty_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completePojogenProperty_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof PojogenProperty)))) {
      super.completePojogenProperty_DbColumn(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = ((PojogenProperty) model);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, null);
    }
  }
  
  @Override
  public void completePojogenProperty_DbColumns(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof PojogenProperty)))) {
      super.completePojogenProperty_DbColumns(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = ((PojogenProperty) model);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, null);
    }
  }
  
  @Override
  public void completeImplementsAssignement_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignement_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeExtendsAssignement_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignement_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeImplementsAssignement_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignement_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeExtendsAssignement_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignement_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeImplementsAssignementGenerics_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignementGenerics_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeExtendsAssignementGenerics_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignementGenerics_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeImplementsAssignementGenerics_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignementGenerics_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeExtendsAssignementGenerics_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignementGenerics_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeColumnTypeAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof PojogenProperty)))) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = ((PojogenProperty) model);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    } else {
      String _dbProcedure = prop.getDbProcedure();
      boolean _notEquals_1 = (!Objects.equal(_dbProcedure, null));
      if (_notEquals_1) {
        String _dbProcedure_1 = prop.getDbProcedure();
        List<String> _procColumns = this.dbResolver.getProcColumns(model, _dbProcedure_1);
        this.acceptColumns(_procColumns, context, acceptor, null, "->");
      } else {
        String _dbFunction = prop.getDbFunction();
        boolean _notEquals_2 = (!Objects.equal(_dbFunction, null));
        if (_notEquals_2) {
          String _dbFunction_1 = prop.getDbFunction();
          List<String> _funColumns = this.dbResolver.getFunColumns(model, _dbFunction_1);
          this.acceptColumns(_funColumns, context, acceptor, null, "->");
        }
      }
    }
  }
  
  @Override
  public void completeColumnAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof PojogenProperty)))) {
      super.completeColumnAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = ((PojogenProperty) model);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
      String _dbTable_2 = prop.getDbTable();
      List<String> _checkColumns = this.dbResolver.getCheckColumns(model, _dbTable_2);
      this.acceptColumns(_checkColumns, context, acceptor, null, "->");
    }
  }
  
  @Override
  public void completeImportAssignement_PkTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ImportAssignement)))) {
      super.completeImportAssignement_PkTable(model, assignment, context, acceptor);
      return;
    }
    final ImportAssignement imp = ((ImportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if (((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(imp.getDbColumn(), null)))) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-many-to-one", _name);
      if (_equals) {
        this.acceptTables(model, context, acceptor, "");
      } else {
        String _dbTable = prop.getDbTable();
        List<DbImport> _dbImports = this.dbResolver.getDbImports(model, _dbTable);
        final Consumer<DbImport> _function = new Consumer<DbImport>() {
          @Override
          public void accept(final DbImport dbImport) {
            if (((!Objects.equal(dbImport.getFkColumn(), null)) && dbImport.getFkColumn().equals(imp.getDbColumn()))) {
              IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
              String _pkTable = dbImport.getPkTable();
              final String proposal = _valueConverter.toString(_pkTable, "IDENT");
              ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
              acceptor.accept(_createCompletionProposal);
            }
          }
        };
        _dbImports.forEach(_function);
      }
    }
  }
  
  @Override
  public void completeImportAssignement_PkColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ImportAssignement)))) {
      super.completeImportAssignement_PkColumn(model, assignment, context, acceptor);
      return;
    }
    final ImportAssignement imp = ((ImportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if ((((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(imp.getDbColumn(), null))) && (!Objects.equal(imp.getPkTable(), null)))) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-many-to-one", _name);
      if (_equals) {
        String _pkTable = imp.getPkTable();
        List<String> _columns = this.dbResolver.getColumns(model, _pkTable);
        this.acceptColumns(_columns, context, acceptor, null, null);
      } else {
        String _dbTable = prop.getDbTable();
        List<DbImport> _dbImports = this.dbResolver.getDbImports(model, _dbTable);
        final Consumer<DbImport> _function = new Consumer<DbImport>() {
          @Override
          public void accept(final DbImport dbImport) {
            if (((!Objects.equal(dbImport.getFkColumn(), null)) && dbImport.getFkColumn().equals(imp.getDbColumn()))) {
              if (((!Objects.equal(dbImport.getPkTable(), null)) && dbImport.getPkTable().equals(imp.getPkTable()))) {
                IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
                String _pkColumn = dbImport.getPkColumn();
                final String proposal = _valueConverter.toString(_pkColumn, "IDENT");
                ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
                acceptor.accept(_createCompletionProposal);
              }
            }
          }
        };
        _dbImports.forEach(_function);
      }
    }
  }
  
  @Override
  public void completeImportAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof PojogenProperty)))) {
      super.completeImportAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = ((PojogenProperty) model);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    }
  }
  
  @Override
  public void completeExportAssignement_FkTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ExportAssignement)))) {
      super.completeExportAssignement_FkTable(model, assignment, context, acceptor);
      return;
    }
    final ExportAssignement exp = ((ExportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if (((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(exp.getDbColumn(), null)))) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-one-to-many", _name);
      if (_equals) {
        this.acceptTables(model, context, acceptor, "");
      } else {
        String _dbTable = prop.getDbTable();
        List<DbExport> _dbExports = this.dbResolver.getDbExports(model, _dbTable);
        final Consumer<DbExport> _function = new Consumer<DbExport>() {
          @Override
          public void accept(final DbExport dbExport) {
            if (((!Objects.equal(dbExport.getPkColumn(), null)) && dbExport.getPkColumn().equals(exp.getDbColumn()))) {
              IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
              String _fkTable = dbExport.getFkTable();
              final String proposal = _valueConverter.toString(_fkTable, "IDENT");
              ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
              acceptor.accept(_createCompletionProposal);
            }
          }
        };
        _dbExports.forEach(_function);
      }
    }
  }
  
  @Override
  public void completeExportAssignement_FkColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ExportAssignement)))) {
      super.completeExportAssignement_FkColumn(model, assignment, context, acceptor);
      return;
    }
    final ExportAssignement exp = ((ExportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if ((((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(exp.getDbColumn(), null))) && (!Objects.equal(exp.getFkTable(), null)))) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-one-to-many", _name);
      if (_equals) {
        String _fkTable = exp.getFkTable();
        List<String> _columns = this.dbResolver.getColumns(model, _fkTable);
        this.acceptColumns(_columns, context, acceptor, null, null);
      } else {
        String _dbTable = prop.getDbTable();
        List<DbExport> _dbExports = this.dbResolver.getDbExports(model, _dbTable);
        final Consumer<DbExport> _function = new Consumer<DbExport>() {
          @Override
          public void accept(final DbExport dbExport) {
            if (((!Objects.equal(dbExport.getPkColumn(), null)) && dbExport.getPkColumn().equals(exp.getDbColumn()))) {
              if (((!Objects.equal(dbExport.getFkTable(), null)) && dbExport.getFkTable().equals(exp.getFkTable()))) {
                IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
                String _fkColumn = dbExport.getFkColumn();
                final String proposal = _valueConverter.toString(_fkColumn, "IDENT");
                ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
                acceptor.accept(_createCompletionProposal);
              }
            }
          }
        };
        _dbExports.forEach(_function);
      }
    }
  }
  
  @Override
  public void completeExportAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof PojogenProperty)))) {
      super.completeExportAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = ((PojogenProperty) model);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    }
  }
  
  @Override
  public void completeManyToManyAssignement_PkColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof PojogenProperty)))) {
      super.completeManyToManyAssignement_PkColumn(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = ((PojogenProperty) model);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    }
  }
  
  @Override
  public void completeManyToManyAssignement_PkTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ManyToManyAssignement)))) {
      super.completeManyToManyAssignement_PkTable(model, assignment, context, acceptor);
      return;
    }
    final ManyToManyAssignement many2 = ((ManyToManyAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    if (((!Objects.equal(prop.getDbTable(), null)) && (!Objects.equal(many2.getPkColumn(), null)))) {
      String _dbTable = prop.getDbTable();
      List<DbImport> _dbImports = this.dbResolver.getDbImports(model, _dbTable);
      final Consumer<DbImport> _function = new Consumer<DbImport>() {
        @Override
        public void accept(final DbImport dbImport) {
          if (((!Objects.equal(dbImport.getPkColumn(), null)) && dbImport.getPkColumn().equals(many2.getPkColumn()))) {
            IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
            String _pkTable = dbImport.getPkTable();
            final String proposal = _valueConverter.toString(_pkTable, "IDENT");
            ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
            acceptor.accept(_createCompletionProposal);
          }
        }
      };
      _dbImports.forEach(_function);
    }
  }
  
  @Override
  public void completeInheritanceAssignement_DbColumns(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof InheritanceAssignement)))) {
      super.completeInheritanceAssignement_DbColumns(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, null);
    }
  }
  
  private final ArrayList<String> methods = CollectionLiterals.<String>newArrayList("toString", "hashCode", "equals", "isDef", "toInit", "enumDef", 
    "enumInit", "index", "procId", "enumIndex");
  
  @Override
  public void completePojogenProperty_Methods(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((!(model instanceof PojogenProperty))) {
      super.completePojogenProperty_Methods(model, assignment, context, acceptor);
      return;
    }
    final Consumer<String> _function = new Consumer<String>() {
      @Override
      public void accept(final String method) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(method, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    this.methods.forEach(_function);
  }
  
  @Override
  public void completeShowColumnTypeAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof PojogenProperty)))) {
      super.completeShowColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = ((PojogenProperty) model);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    } else {
      String _dbProcedure = prop.getDbProcedure();
      boolean _notEquals_1 = (!Objects.equal(_dbProcedure, null));
      if (_notEquals_1) {
        String _dbProcedure_1 = prop.getDbProcedure();
        List<String> _procColumns = this.dbResolver.getProcColumns(model, _dbProcedure_1);
        this.acceptColumns(_procColumns, context, acceptor, null, "->");
      } else {
        String _dbFunction = prop.getDbFunction();
        boolean _notEquals_2 = (!Objects.equal(_dbFunction, null));
        if (_notEquals_2) {
          String _dbFunction_1 = prop.getDbFunction();
          List<String> _funColumns = this.dbResolver.getFunColumns(model, _dbFunction_1);
          this.acceptColumns(_funColumns, context, acceptor, null, "->");
        }
      }
    }
  }
  
  @Override
  public void completeShowColumnTypeAssignement_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof ShowColumnTypeAssignement)))) {
      super.completeShowColumnTypeAssignement_Type(model, assignment, context, acceptor);
      return;
    }
    final ShowColumnTypeAssignement prop = ((ShowColumnTypeAssignement) model);
    final PojogenProperty prop2 = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    String type = ((String) null);
    String _dbTable = prop2.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop2.getDbTable();
      String _dbColumn = prop.getDbColumn();
      String _type = this.dbResolver.getType(model, _dbTable_1, _dbColumn);
      type = _type;
    } else {
      String _dbProcedure = prop2.getDbProcedure();
      boolean _notEquals_1 = (!Objects.equal(_dbProcedure, null));
      if (_notEquals_1) {
        String _dbProcedure_1 = prop2.getDbProcedure();
        String _dbColumn_1 = prop.getDbColumn();
        String _type_1 = this.dbResolver.getType(model, _dbProcedure_1, _dbColumn_1);
        type = _type_1;
      } else {
        String _dbFunction = prop2.getDbFunction();
        boolean _notEquals_2 = (!Objects.equal(_dbFunction, null));
        if (_notEquals_2) {
          String _dbFunction_1 = prop2.getDbFunction();
          String _dbColumn_2 = prop.getDbColumn();
          String _type_2 = this.dbResolver.getType(model, _dbFunction_1, _dbColumn_2);
          type = _type_2;
        }
      }
    }
    boolean _notEquals_3 = (!Objects.equal(type, null));
    if (_notEquals_3) {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(type, "PropertyValue");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    }
  }
  
  @Override
  public void completeJoinTableAssignement_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeJoinTableAssignement_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "->");
  }
  
  @Override
  public void completeJoinTableAssignement_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeJoinTableAssignement_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public Set<PojoDefinitionModel> listPojos(final ResourceSet resourceSet, final IScope scope) {
    final Comparator<PojoDefinitionModel> _function = new Comparator<PojoDefinitionModel>() {
      @Override
      public int compare(final PojoDefinitionModel o1, final PojoDefinitionModel o2) {
        String _name = o1.getName();
        String _name_1 = o2.getName();
        return _name.compareTo(_name_1);
      }
    };
    final TreeSet<PojoDefinitionModel> result = CollectionLiterals.<PojoDefinitionModel>newTreeSet(_function);
    Iterable<IEObjectDescription> _allElements = scope.getAllElements();
    final Consumer<IEObjectDescription> _function_1 = new Consumer<IEObjectDescription>() {
      @Override
      public void accept(final IEObjectDescription description) {
        URI _eObjectURI = description.getEObjectURI();
        EObject _eObject = resourceSet.getEObject(_eObjectURI, true);
        final PojoDefinitionModel pojo = ((PojoDefinitionModel) _eObject);
        result.add(pojo);
      }
    };
    _allElements.forEach(_function_1);
    return result;
  }
  
  public Set<TableDefinitionModel> listTables(final ResourceSet resourceSet, final IScope scope) {
    final Comparator<TableDefinitionModel> _function = new Comparator<TableDefinitionModel>() {
      @Override
      public int compare(final TableDefinitionModel o1, final TableDefinitionModel o2) {
        String _name = o1.getName();
        String _name_1 = o2.getName();
        return _name.compareTo(_name_1);
      }
    };
    final TreeSet<TableDefinitionModel> result = CollectionLiterals.<TableDefinitionModel>newTreeSet(_function);
    Iterable<IEObjectDescription> _allElements = scope.getAllElements();
    final Consumer<IEObjectDescription> _function_1 = new Consumer<IEObjectDescription>() {
      @Override
      public void accept(final IEObjectDescription description) {
        URI _eObjectURI = description.getEObjectURI();
        EObject _eObject = resourceSet.getEObject(_eObjectURI, true);
        final TableDefinitionModel table = ((TableDefinitionModel) _eObject);
        result.add(table);
      }
    };
    _allElements.forEach(_function_1);
    return result;
  }
  
  @Override
  public void complete_StatementModifier(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final MetaStatement metaStatement = EcoreUtil2.<MetaStatement>getContainerOfType(model, MetaStatement.class);
    final Artifacts artifacts = EcoreUtil2.<Artifacts>getContainerOfType(metaStatement, Artifacts.class);
    Resource _eResource = artifacts.eResource();
    ResourceSet _resourceSet = _eResource.getResourceSet();
    IScopeProvider _scopeProvider = this.getScopeProvider();
    IScope _scope = _scopeProvider.getScope(artifacts, ProcessorMetaPackage.Literals.ARTIFACTS__POJOS);
    final Set<PojoDefinitionModel> pojos = this.listPojos(_resourceSet, _scope);
    final Consumer<PojoDefinitionModel> _function = new Consumer<PojoDefinitionModel>() {
      @Override
      public void accept(final PojoDefinitionModel pojo) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        String _name = pojo.getName();
        final String proposal = _valueConverter.toString(_name, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(((Constants.CONSTANT_USAGE + "=") + proposal), context);
        acceptor.accept(_createCompletionProposal);
        ICompletionProposal _createCompletionProposal_1 = ProcessorMetaProposalProvider.this.createCompletionProposal(((Constants.IDENTIFIER_USAGE + "=") + proposal), context);
        acceptor.accept(_createCompletionProposal_1);
        ICompletionProposal _createCompletionProposal_2 = ProcessorMetaProposalProvider.this.createCompletionProposal(((Constants.COLUMN_USAGE + "=") + proposal), context);
        acceptor.accept(_createCompletionProposal_2);
        ICompletionProposal _createCompletionProposal_3 = ProcessorMetaProposalProvider.this.createCompletionProposal(((Constants.INDEX_USAGE + "=") + proposal), context);
        acceptor.accept(_createCompletionProposal_3);
      }
    };
    pojos.forEach(_function);
    Resource _eResource_1 = artifacts.eResource();
    ResourceSet _resourceSet_1 = _eResource_1.getResourceSet();
    IScopeProvider _scopeProvider_1 = this.getScopeProvider();
    IScope _scope_1 = _scopeProvider_1.getScope(artifacts, ProcessorMetaPackage.Literals.ARTIFACTS__TABLES);
    final Set<TableDefinitionModel> tables = this.listTables(_resourceSet_1, _scope_1);
    final Consumer<TableDefinitionModel> _function_1 = new Consumer<TableDefinitionModel>() {
      @Override
      public void accept(final TableDefinitionModel table) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        String _name = table.getName();
        final String proposal = _valueConverter.toString(_name, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(((Constants.TABLE_USAGE + "=") + proposal), context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    tables.forEach(_function_1);
  }
  
  @Override
  public void complete_MappingRuleModifier(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final MappingRule mappingRule = EcoreUtil2.<MappingRule>getContainerOfType(model, MappingRule.class);
    final Artifacts artifacts = EcoreUtil2.<Artifacts>getContainerOfType(mappingRule, Artifacts.class);
    Resource _eResource = artifacts.eResource();
    ResourceSet _resourceSet = _eResource.getResourceSet();
    IScopeProvider _scopeProvider = this.getScopeProvider();
    IScope _scope = _scopeProvider.getScope(artifacts, ProcessorMetaPackage.Literals.ARTIFACTS__POJOS);
    final Set<PojoDefinitionModel> pojos = this.listPojos(_resourceSet, _scope);
    final Consumer<PojoDefinitionModel> _function = new Consumer<PojoDefinitionModel>() {
      @Override
      public void accept(final PojoDefinitionModel pojo) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        String _name = pojo.getName();
        final String proposal = _valueConverter.toString(_name, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(((Constants.MAPPING_USAGE + "=") + proposal), context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    pojos.forEach(_function);
  }
  
  @Override
  public void complete_Modifier(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.addProposalList(this.TYPES, "IDENT", context, acceptor, "type=");
    this.addProposalList(this.MODIFIERS, "IDENT", context, acceptor, null);
  }
  
  @Override
  public void complete_MappingItemModifier(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.addProposalList(this.TYPES, "IDENT", context, acceptor, "type=");
    this.addProposalList(this.MODIFIERS, "IDENT", context, acceptor, null);
  }
  
  @Override
  public void completeMetagenProperty_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeMetagenProperty_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeMetagenProperty_DbFunction(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbFunction(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeMetagenProperty_DbProcedure(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbProcedure(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  @Override
  public void completeMetagenProperty_Sequence(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_Sequence(model, assignment, context, acceptor);
      return;
    }
    this.acceptSequences(model, context, acceptor);
  }
  
  @Override
  public void completeMetaTypeAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof MetagenProperty)))) {
      super.completeMetaTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = ((PojogenProperty) model);
    String _dbTable = prop.getDbTable();
    List<String> _columns = this.dbResolver.getColumns(model, _dbTable);
    this.acceptColumns(_columns, context, acceptor, null, null);
  }
  
  @Override
  public void completeDaogenProperty_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDaogenProperty_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  @Override
  public void completeMetagenProperty_DbColumns(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof MetagenProperty)))) {
      super.completeMetagenProperty_DbColumns(model, assignment, context, acceptor);
      return;
    }
    final MetagenProperty prop = ((MetagenProperty) model);
    String _dbTable = prop.getDbTable();
    List<String> _columns = this.dbResolver.getColumns(model, _dbTable);
    this.acceptColumns(_columns, context, acceptor, null, null);
  }
  
  @Override
  public void completeDatabaseMetaInfoAssignement_DbMetaInfo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseMetaInfoAssignement_DbMetaInfo(model, assignment, context, acceptor);
      return;
    }
    String dbMetaInfo = this.dbResolver.getDbMetaInfo(model);
    boolean _notEquals = (!Objects.equal(dbMetaInfo, null));
    if (_notEquals) {
      dbMetaInfo = (("\"" + dbMetaInfo) + "\"");
    }
    IValueConverterService _valueConverter = this.getValueConverter();
    final String proposal = _valueConverter.toString(dbMetaInfo, "PropertyValue");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void completeDriverMetaInfoAssignement_DbDriverInfo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDriverMetaInfoAssignement_DbDriverInfo(model, assignment, context, acceptor);
      return;
    }
    String dbDriverInfo = this.dbResolver.getDbDriverInfo(model);
    boolean _notEquals = (!Objects.equal(dbDriverInfo, null));
    if (_notEquals) {
      dbDriverInfo = (("\"" + dbDriverInfo) + "\"");
    }
    IValueConverterService _valueConverter = this.getValueConverter();
    final String proposal = _valueConverter.toString(dbDriverInfo, "PropertyValue");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void completeDriverMethodOutputAssignement_DriverMethod(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof DatabaseProperty)))) {
      super.completeDriverMethodOutputAssignement_DriverMethod(model, assignment, context, acceptor);
      return;
    }
    Set<String> _driverMethods = this.dbResolver.getDriverMethods(model);
    final Consumer<String> _function = new Consumer<String>() {
      @Override
      public void accept(final String driverMetod) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(driverMetod, "PropertyValue");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal((proposal + "->"), context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    _driverMethods.forEach(_function);
  }
  
  @Override
  public void completeDriverMethodOutputAssignement_CallOutput(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if (((!this.isResolveDb(model)) || (!(model instanceof DriverMethodOutputAssignement)))) {
      super.completeDriverMethodOutputAssignement_CallOutput(model, assignment, context, acceptor);
      return;
    }
    final DriverMethodOutputAssignement prop = ((DriverMethodOutputAssignement) model);
    Object _elvis = null;
    String _driverMethod = prop.getDriverMethod();
    Object _driverMethodOutput = this.dbResolver.getDriverMethodOutput(model, _driverMethod);
    if (_driverMethodOutput != null) {
      _elvis = _driverMethodOutput;
    } else {
      _elvis = "null";
    }
    Object methodCallOutput = _elvis;
    IValueConverterService _valueConverter = this.getValueConverter();
    final String proposal = _valueConverter.toString((("\"" + methodCallOutput) + "\""), "PropertyValue");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  @Override
  public void completeDatabaseTypeAssignement_DbType(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseTypeAssignement_DbType(model, assignment, context, acceptor);
      return;
    }
    final String dbMetaInfo = this.dbResolver.getDbMetaInfo(model);
    DbResolver.DbType[] _fromDbMetaInfo = DbResolver.DbType.fromDbMetaInfo(dbMetaInfo);
    final Consumer<DbResolver.DbType> _function = new Consumer<DbResolver.DbType>() {
      @Override
      public void accept(final DbResolver.DbType dbType) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        String _value = dbType.getValue();
        final String proposal = _valueConverter.toString(_value, "PropertyValue");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    ((List<DbResolver.DbType>)Conversions.doWrapArray(_fromDbMetaInfo)).forEach(_function);
  }
  
  @Override
  public void completeDatabaseCatalogAssignement_DbCatalog(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseCatalogAssignement_DbCatalog(model, assignment, context, acceptor);
      return;
    }
    List<String> _catalogs = this.dbResolver.getCatalogs(model);
    final Consumer<String> _function = new Consumer<String>() {
      @Override
      public void accept(final String catalog) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(catalog, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    _catalogs.forEach(_function);
  }
  
  @Override
  public void completeDatabaseSchemaAssignement_DbSchema(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseSchemaAssignement_DbSchema(model, assignment, context, acceptor);
      return;
    }
    List<String> _schemas = this.dbResolver.getSchemas(model);
    final Consumer<String> _function = new Consumer<String>() {
      @Override
      public void accept(final String schema) {
        IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(schema, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    _schemas.forEach(_function);
  }
  
  @Override
  public void completeDebugLevelAssignement_Debug(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.addProposalList(this.DEBUG_LEVELS, "DEBUG_LEVELS", context, acceptor, null);
  }
  
  @Override
  public void completeProcedurePojoAssignement_DbProcedure(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeProcedurePojoAssignement_DbProcedure(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  @Override
  public void completeFunctionPojoAssignement_DbFunction(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeFunctionPojoAssignement_DbFunction(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  @Override
  public void completeOrdSql_Ident(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolvePojo = this.isResolvePojo(model);
    boolean _not = (!_isResolvePojo);
    if (_not) {
      super.completeOrdSql_Ident(model, assignment, context, acceptor);
      return;
    }
    final MetaStatement metaStatement = EcoreUtil2.<MetaStatement>getContainerOfType(model, MetaStatement.class);
    final Artifacts artifacts = EcoreUtil2.<Artifacts>getContainerOfType(model, Artifacts.class);
    String pojoName = Utils.getTokenFromModifier(metaStatement, Constants.INDEX_USAGE);
    boolean _equals = Objects.equal(pojoName, null);
    if (_equals) {
      String _tokenFromModifier = Utils.getTokenFromModifier(metaStatement, Constants.IDENTIFIER_USAGE);
      pojoName = _tokenFromModifier;
    }
    PojoDefinition _xifexpression = null;
    boolean _notEquals = (!Objects.equal(pojoName, null));
    if (_notEquals) {
      Map<String, PojoDefinition> _modelPojos = this.modelProperty.getModelPojos(artifacts);
      _xifexpression = _modelPojos.get(pojoName);
    }
    final PojoDefinition pojoDefinition = _xifexpression;
    boolean _equals_1 = Objects.equal(pojoDefinition, null);
    if (_equals_1) {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(("Error: I can\'t load pojo for " + model), "IDENT");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
      return;
    }
    boolean _isOldPojoValidator = this.modelProperty.isOldPojoValidator(model);
    final boolean newPojoValidator = (!_isOldPojoValidator);
    if ((newPojoValidator && (pojoDefinition.getClassx() instanceof JvmDeclaredType))) {
      final ProcessorMetaProposalProvider.Founder founder = new ProcessorMetaProposalProvider.Founder();
      JvmType _classx = pojoDefinition.getClassx();
      final JvmDeclaredType type = ((JvmDeclaredType) _classx);
      Iterable<JvmFeature> _allFeatures = type.getAllFeatures();
      final Function1<JvmFeature, Boolean> _function = new Function1<JvmFeature, Boolean>() {
        @Override
        public Boolean apply(final JvmFeature it) {
          return Boolean.valueOf((it instanceof JvmField));
        }
      };
      Iterable<JvmFeature> _filter = IterableExtensions.<JvmFeature>filter(_allFeatures, _function);
      final Function1<JvmFeature, Boolean> _function_1 = new Function1<JvmFeature, Boolean>() {
        @Override
        public Boolean apply(final JvmFeature it) {
          return Boolean.valueOf(it.isStatic());
        }
      };
      Iterable<JvmFeature> _filter_1 = IterableExtensions.<JvmFeature>filter(_filter, _function_1);
      final Function1<JvmFeature, Boolean> _function_2 = new Function1<JvmFeature, Boolean>() {
        @Override
        public Boolean apply(final JvmFeature it) {
          String _simpleName = it.getSimpleName();
          return Boolean.valueOf(_simpleName.startsWith("ORDER_BY_"));
        }
      };
      Iterable<JvmFeature> _filter_2 = IterableExtensions.<JvmFeature>filter(_filter_1, _function_2);
      final Consumer<JvmFeature> _function_3 = new Consumer<JvmFeature>() {
        @Override
        public void accept(final JvmFeature feature) {
          founder.found = true;
          IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
          String _simpleName = feature.getSimpleName();
          String _string = _valueConverter.toString(_simpleName, "IDENT");
          final String proposal = _string.substring(9);
          InputOutput.<String>println(proposal);
          ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
          acceptor.accept(_createCompletionProposal);
        }
      };
      _filter_2.forEach(_function_3);
      if ((!founder.found)) {
        final Iterable<JvmDeclaredType> nestedTypes = type.findAllNestedTypesByName("Order");
        if ((((!Objects.equal(nestedTypes, null)) && (!IterableExtensions.isEmpty(nestedTypes))) && (IterableExtensions.<JvmDeclaredType>head(nestedTypes) instanceof JvmEnumerationType))) {
          JvmDeclaredType _head = IterableExtensions.<JvmDeclaredType>head(nestedTypes);
          final JvmEnumerationType enumType = ((JvmEnumerationType) _head);
          Iterable<JvmFeature> _allFeatures_1 = enumType.getAllFeatures();
          final Function1<JvmFeature, Boolean> _function_4 = new Function1<JvmFeature, Boolean>() {
            @Override
            public Boolean apply(final JvmFeature it) {
              return Boolean.valueOf((it instanceof JvmEnumerationLiteral));
            }
          };
          Iterable<JvmFeature> _filter_3 = IterableExtensions.<JvmFeature>filter(_allFeatures_1, _function_4);
          final Consumer<JvmFeature> _function_5 = new Consumer<JvmFeature>() {
            @Override
            public void accept(final JvmFeature feature) {
              IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
              String _simpleName = feature.getSimpleName();
              final String proposal = _valueConverter.toString(_simpleName, "IDENT");
              InputOutput.<String>println(proposal);
              ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
              acceptor.accept(_createCompletionProposal);
            }
          };
          _filter_3.forEach(_function_5);
        }
      }
    } else {
      Resource _eResource = model.eResource();
      URI _uRI = null;
      if (_eResource!=null) {
        _uRI=_eResource.getURI();
      }
      final URI uri = _uRI;
      final String clazz = pojoDefinition.getQualifiedName();
      final Map<String, String> orders = this.pojoResolver.getOrders(clazz, uri);
      boolean _notEquals_1 = (!Objects.equal(orders, null));
      if (_notEquals_1) {
        Collection<String> _values = orders.values();
        final Consumer<String> _function_6 = new Consumer<String>() {
          @Override
          public void accept(final String order) {
            IValueConverterService _valueConverter = ProcessorMetaProposalProvider.this.getValueConverter();
            final String proposal = _valueConverter.toString(order, "IDENT");
            ICompletionProposal _createCompletionProposal = ProcessorMetaProposalProvider.this.createCompletionProposal(proposal, context);
            acceptor.accept(_createCompletionProposal);
          }
        };
        _values.forEach(_function_6);
      }
    }
  }
}
