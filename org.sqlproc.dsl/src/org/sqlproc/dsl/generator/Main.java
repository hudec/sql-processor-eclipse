/*
 * generated by Xtext
 */
package org.sqlproc.dsl.generator;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Main {

    public static void main(String[] args) {
        if (args.length == 0) {
            System.err.println("Aborting: no path to EMF resource provided!");
            return;
        }
        Injector injector = new org.sqlproc.dsl.ProcessorDslStandaloneSetup().createInjectorAndDoEMFRegistration();
        Main main = injector.getInstance(Main.class);
        main.runGenerator(args);
    }

    @Inject
    private Provider<ResourceSet> resourceSetProvider;

    @Inject
    private IResourceValidator validator;

    @Inject
    private IGenerator2 generator;

    @Inject
    private JavaIoFileSystemAccess fileAccess;

    protected void runGenerator(String... sResources) {

        ResourceSet set = resourceSetProvider.get();
        List<Resource> set2 = new ArrayList<Resource>();
        for (String sResource : sResources) {
            Resource resource = set.getResource(URI.createURI(sResource), true);
            set.getResources().add(resource);
            set2.add(resource);
        }

        for (Resource resource : set2) {
            List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
            if (!list.isEmpty()) {
                for (Issue issue : list) {
                    System.err.println(issue);
                }
                return;
            }
        }

        System.out.println("Resource(s) validation finished.");
        // configure and start the generator
        fileAccess.setOutputPath("src-gen/");
        generator.doGenerate(set, fileAccess);

        System.out.println("Code generation finished.");
    }
}
